/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// AuthenticateResultModel
    /// </summary>
    [DataContract]
        public partial class AuthenticateResultModel :  IEquatable<AuthenticateResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateResultModel" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken.</param>
        /// <param name="encryptedAccessToken">encryptedAccessToken.</param>
        /// <param name="expireInSeconds">expireInSeconds.</param>
        /// <param name="shouldResetPassword">shouldResetPassword.</param>
        /// <param name="passwordResetCode">passwordResetCode.</param>
        /// <param name="userId">userId.</param>
        /// <param name="requiresTwoFactorVerification">requiresTwoFactorVerification.</param>
        /// <param name="twoFactorAuthProviders">twoFactorAuthProviders.</param>
        /// <param name="twoFactorRememberClientToken">twoFactorRememberClientToken.</param>
        /// <param name="returnUrl">returnUrl.</param>
        /// <param name="refreshToken">refreshToken.</param>
        /// <param name="refreshTokenExpireInSeconds">refreshTokenExpireInSeconds.</param>
        public AuthenticateResultModel(string accessToken = default(string), string encryptedAccessToken = default(string), int? expireInSeconds = default(int?), bool? shouldResetPassword = default(bool?), string passwordResetCode = default(string), long? userId = default(long?), bool? requiresTwoFactorVerification = default(bool?), List<string> twoFactorAuthProviders = default(List<string>), string twoFactorRememberClientToken = default(string), string returnUrl = default(string), string refreshToken = default(string), int? refreshTokenExpireInSeconds = default(int?))
        {
            this.AccessToken = accessToken;
            this.EncryptedAccessToken = encryptedAccessToken;
            this.ExpireInSeconds = expireInSeconds;
            this.ShouldResetPassword = shouldResetPassword;
            this.PasswordResetCode = passwordResetCode;
            this.UserId = userId;
            this.RequiresTwoFactorVerification = requiresTwoFactorVerification;
            this.TwoFactorAuthProviders = twoFactorAuthProviders;
            this.TwoFactorRememberClientToken = twoFactorRememberClientToken;
            this.ReturnUrl = returnUrl;
            this.RefreshToken = refreshToken;
            this.RefreshTokenExpireInSeconds = refreshTokenExpireInSeconds;
        }
        
        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedAccessToken
        /// </summary>
        [DataMember(Name="encryptedAccessToken", EmitDefaultValue=false)]
        public string EncryptedAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets ExpireInSeconds
        /// </summary>
        [DataMember(Name="expireInSeconds", EmitDefaultValue=false)]
        public int? ExpireInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ShouldResetPassword
        /// </summary>
        [DataMember(Name="shouldResetPassword", EmitDefaultValue=false)]
        public bool? ShouldResetPassword { get; set; }

        /// <summary>
        /// Gets or Sets PasswordResetCode
        /// </summary>
        [DataMember(Name="passwordResetCode", EmitDefaultValue=false)]
        public string PasswordResetCode { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets RequiresTwoFactorVerification
        /// </summary>
        [DataMember(Name="requiresTwoFactorVerification", EmitDefaultValue=false)]
        public bool? RequiresTwoFactorVerification { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthProviders
        /// </summary>
        [DataMember(Name="twoFactorAuthProviders", EmitDefaultValue=false)]
        public List<string> TwoFactorAuthProviders { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorRememberClientToken
        /// </summary>
        [DataMember(Name="twoFactorRememberClientToken", EmitDefaultValue=false)]
        public string TwoFactorRememberClientToken { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refreshToken", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpireInSeconds
        /// </summary>
        [DataMember(Name="refreshTokenExpireInSeconds", EmitDefaultValue=false)]
        public int? RefreshTokenExpireInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticateResultModel {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  EncryptedAccessToken: ").Append(EncryptedAccessToken).Append("\n");
            sb.Append("  ExpireInSeconds: ").Append(ExpireInSeconds).Append("\n");
            sb.Append("  ShouldResetPassword: ").Append(ShouldResetPassword).Append("\n");
            sb.Append("  PasswordResetCode: ").Append(PasswordResetCode).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RequiresTwoFactorVerification: ").Append(RequiresTwoFactorVerification).Append("\n");
            sb.Append("  TwoFactorAuthProviders: ").Append(TwoFactorAuthProviders).Append("\n");
            sb.Append("  TwoFactorRememberClientToken: ").Append(TwoFactorRememberClientToken).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RefreshTokenExpireInSeconds: ").Append(RefreshTokenExpireInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticateResultModel);
        }

        /// <summary>
        /// Returns true if AuthenticateResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticateResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticateResultModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.EncryptedAccessToken == input.EncryptedAccessToken ||
                    (this.EncryptedAccessToken != null &&
                    this.EncryptedAccessToken.Equals(input.EncryptedAccessToken))
                ) && 
                (
                    this.ExpireInSeconds == input.ExpireInSeconds ||
                    (this.ExpireInSeconds != null &&
                    this.ExpireInSeconds.Equals(input.ExpireInSeconds))
                ) && 
                (
                    this.ShouldResetPassword == input.ShouldResetPassword ||
                    (this.ShouldResetPassword != null &&
                    this.ShouldResetPassword.Equals(input.ShouldResetPassword))
                ) && 
                (
                    this.PasswordResetCode == input.PasswordResetCode ||
                    (this.PasswordResetCode != null &&
                    this.PasswordResetCode.Equals(input.PasswordResetCode))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.RequiresTwoFactorVerification == input.RequiresTwoFactorVerification ||
                    (this.RequiresTwoFactorVerification != null &&
                    this.RequiresTwoFactorVerification.Equals(input.RequiresTwoFactorVerification))
                ) && 
                (
                    this.TwoFactorAuthProviders == input.TwoFactorAuthProviders ||
                    this.TwoFactorAuthProviders != null &&
                    input.TwoFactorAuthProviders != null &&
                    this.TwoFactorAuthProviders.SequenceEqual(input.TwoFactorAuthProviders)
                ) && 
                (
                    this.TwoFactorRememberClientToken == input.TwoFactorRememberClientToken ||
                    (this.TwoFactorRememberClientToken != null &&
                    this.TwoFactorRememberClientToken.Equals(input.TwoFactorRememberClientToken))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.RefreshTokenExpireInSeconds == input.RefreshTokenExpireInSeconds ||
                    (this.RefreshTokenExpireInSeconds != null &&
                    this.RefreshTokenExpireInSeconds.Equals(input.RefreshTokenExpireInSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.EncryptedAccessToken != null)
                    hashCode = hashCode * 59 + this.EncryptedAccessToken.GetHashCode();
                if (this.ExpireInSeconds != null)
                    hashCode = hashCode * 59 + this.ExpireInSeconds.GetHashCode();
                if (this.ShouldResetPassword != null)
                    hashCode = hashCode * 59 + this.ShouldResetPassword.GetHashCode();
                if (this.PasswordResetCode != null)
                    hashCode = hashCode * 59 + this.PasswordResetCode.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.RequiresTwoFactorVerification != null)
                    hashCode = hashCode * 59 + this.RequiresTwoFactorVerification.GetHashCode();
                if (this.TwoFactorAuthProviders != null)
                    hashCode = hashCode * 59 + this.TwoFactorAuthProviders.GetHashCode();
                if (this.TwoFactorRememberClientToken != null)
                    hashCode = hashCode * 59 + this.TwoFactorRememberClientToken.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.RefreshTokenExpireInSeconds != null)
                    hashCode = hashCode * 59 + this.RefreshTokenExpireInSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
