/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ResolveAgentViewModel
    /// </summary>
    [DataContract]
    public partial class ResolveAgentViewModel : IEquatable<ResolveAgentViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveAgentViewModel" /> class.
        /// </summary>
        /// <param name="agentGroupName">agentGroupName.</param>
        /// <param name="agentName">agentName.</param>
        /// <param name="hostMachineName">hostMachineName (required).</param>
        /// <param name="macAddressesCS">macAddressesCS.</param>
        public ResolveAgentViewModel(string agentGroupName = default(string), string agentName = default(string), string hostMachineName = default(string), string macAddressesCS = default(string))
        {
            // to ensure "hostMachineName" is required (not null)
            if (hostMachineName == null)
            {
                throw new InvalidDataException("hostMachineName is a required property for ResolveAgentViewModel and cannot be null");
            }
            else
            {
                this.HostMachineName = hostMachineName;
            }
            this.AgentGroupName = agentGroupName;
            this.AgentName = agentName;
            this.MacAddressesCS = macAddressesCS;
        }

        /// <summary>
        /// Gets or Sets AgentGroupName
        /// </summary>
        [DataMember(Name = "agentGroupName", EmitDefaultValue = false)]
        public string AgentGroupName { get; set; }

        /// <summary>
        /// Gets or Sets AgentName
        /// </summary>
        [DataMember(Name = "agentName", EmitDefaultValue = false)]
        public string AgentName { get; set; }

        /// <summary>
        /// Gets or Sets HostMachineName
        /// </summary>
        [DataMember(Name = "hostMachineName", EmitDefaultValue = false)]
        public string HostMachineName { get; set; }

        /// <summary>
        /// Gets or Sets MacAddressesCS
        /// </summary>
        [DataMember(Name = "macAddressesCS", EmitDefaultValue = false)]
        public string MacAddressesCS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResolveAgentViewModel {\n");
            sb.Append("  AgentGroupName: ").Append(AgentGroupName).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  HostMachineName: ").Append(HostMachineName).Append("\n");
            sb.Append("  MacAddressesCS: ").Append(MacAddressesCS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResolveAgentViewModel);
        }

        /// <summary>
        /// Returns true if ResolveAgentViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ResolveAgentViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResolveAgentViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AgentGroupName == input.AgentGroupName ||
                    (this.AgentGroupName != null &&
                    this.AgentGroupName.Equals(input.AgentGroupName))
                ) &&
                (
                    this.AgentName == input.AgentName ||
                    (this.AgentName != null &&
                    this.AgentName.Equals(input.AgentName))
                ) &&
                (
                    this.HostMachineName == input.HostMachineName ||
                    (this.HostMachineName != null &&
                    this.HostMachineName.Equals(input.HostMachineName))
                ) &&
                (
                    this.MacAddressesCS == input.MacAddressesCS ||
                    (this.MacAddressesCS != null &&
                    this.MacAddressesCS.Equals(input.MacAddressesCS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentGroupName != null)
                    hashCode = hashCode * 59 + this.AgentGroupName.GetHashCode();
                if (this.AgentName != null)
                    hashCode = hashCode * 59 + this.AgentName.GetHashCode();
                if (this.HostMachineName != null)
                    hashCode = hashCode * 59 + this.HostMachineName.GetHashCode();
                if (this.MacAddressesCS != null)
                    hashCode = hashCode * 59 + this.MacAddressesCS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}