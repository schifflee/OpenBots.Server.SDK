/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ExternalAuthenticateModel
    /// </summary>
    [DataContract]
        public partial class ExternalAuthenticateModel :  IEquatable<ExternalAuthenticateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAuthenticateModel" /> class.
        /// </summary>
        /// <param name="authProvider">authProvider (required).</param>
        /// <param name="providerKey">providerKey (required).</param>
        /// <param name="providerAccessCode">providerAccessCode (required).</param>
        /// <param name="returnUrl">returnUrl.</param>
        /// <param name="singleSignIn">singleSignIn.</param>
        public ExternalAuthenticateModel(string authProvider = default(string), string providerKey = default(string), string providerAccessCode = default(string), string returnUrl = default(string), bool? singleSignIn = default(bool?))
        {
            // to ensure "authProvider" is required (not null)
            if (authProvider == null)
            {
                throw new InvalidDataException("authProvider is a required property for ExternalAuthenticateModel and cannot be null");
            }
            else
            {
                this.AuthProvider = authProvider;
            }
            // to ensure "providerKey" is required (not null)
            if (providerKey == null)
            {
                throw new InvalidDataException("providerKey is a required property for ExternalAuthenticateModel and cannot be null");
            }
            else
            {
                this.ProviderKey = providerKey;
            }
            // to ensure "providerAccessCode" is required (not null)
            if (providerAccessCode == null)
            {
                throw new InvalidDataException("providerAccessCode is a required property for ExternalAuthenticateModel and cannot be null");
            }
            else
            {
                this.ProviderAccessCode = providerAccessCode;
            }
            this.ReturnUrl = returnUrl;
            this.SingleSignIn = singleSignIn;
        }
        
        /// <summary>
        /// Gets or Sets AuthProvider
        /// </summary>
        [DataMember(Name="authProvider", EmitDefaultValue=false)]
        public string AuthProvider { get; set; }

        /// <summary>
        /// Gets or Sets ProviderKey
        /// </summary>
        [DataMember(Name="providerKey", EmitDefaultValue=false)]
        public string ProviderKey { get; set; }

        /// <summary>
        /// Gets or Sets ProviderAccessCode
        /// </summary>
        [DataMember(Name="providerAccessCode", EmitDefaultValue=false)]
        public string ProviderAccessCode { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets SingleSignIn
        /// </summary>
        [DataMember(Name="singleSignIn", EmitDefaultValue=false)]
        public bool? SingleSignIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalAuthenticateModel {\n");
            sb.Append("  AuthProvider: ").Append(AuthProvider).Append("\n");
            sb.Append("  ProviderKey: ").Append(ProviderKey).Append("\n");
            sb.Append("  ProviderAccessCode: ").Append(ProviderAccessCode).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  SingleSignIn: ").Append(SingleSignIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalAuthenticateModel);
        }

        /// <summary>
        /// Returns true if ExternalAuthenticateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalAuthenticateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalAuthenticateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthProvider == input.AuthProvider ||
                    (this.AuthProvider != null &&
                    this.AuthProvider.Equals(input.AuthProvider))
                ) && 
                (
                    this.ProviderKey == input.ProviderKey ||
                    (this.ProviderKey != null &&
                    this.ProviderKey.Equals(input.ProviderKey))
                ) && 
                (
                    this.ProviderAccessCode == input.ProviderAccessCode ||
                    (this.ProviderAccessCode != null &&
                    this.ProviderAccessCode.Equals(input.ProviderAccessCode))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.SingleSignIn == input.SingleSignIn ||
                    (this.SingleSignIn != null &&
                    this.SingleSignIn.Equals(input.SingleSignIn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthProvider != null)
                    hashCode = hashCode * 59 + this.AuthProvider.GetHashCode();
                if (this.ProviderKey != null)
                    hashCode = hashCode * 59 + this.ProviderKey.GetHashCode();
                if (this.ProviderAccessCode != null)
                    hashCode = hashCode * 59 + this.ProviderAccessCode.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.SingleSignIn != null)
                    hashCode = hashCode * 59 + this.SingleSignIn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
