/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ExtractedDocumentPage
    /// </summary>
    [DataContract]
        public partial class ExtractedDocumentPage :  IEquatable<ExtractedDocumentPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractedDocumentPage" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="filePageNumber">filePageNumber.</param>
        /// <param name="schemaPageNumber">schemaPageNumber.</param>
        /// <param name="sessionID">sessionID.</param>
        /// <param name="extractedDocumentId">extractedDocumentId.</param>
        /// <param name="extractedDocumentFk">extractedDocumentFk.</param>
        /// <param name="organizationUnitId">organizationUnitId.</param>
        /// <param name="organizationUnitFk">organizationUnitFk.</param>
        /// <param name="id">id.</param>
        public ExtractedDocumentPage(int? tenantId = default(int?), int? filePageNumber = default(int?), int? schemaPageNumber = default(int?), Guid? sessionID = default(Guid?), Guid? extractedDocumentId = default(Guid?), ExtractedDocument extractedDocumentFk = default(ExtractedDocument), long? organizationUnitId = default(long?), OrganizationUnit organizationUnitFk = default(OrganizationUnit), Guid? id = default(Guid?))
        {
            this.TenantId = tenantId;
            this.FilePageNumber = filePageNumber;
            this.SchemaPageNumber = schemaPageNumber;
            this.SessionID = sessionID;
            this.ExtractedDocumentId = extractedDocumentId;
            this.ExtractedDocumentFk = extractedDocumentFk;
            this.OrganizationUnitId = organizationUnitId;
            this.OrganizationUnitFk = organizationUnitFk;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public int? TenantId { get; set; }

        /// <summary>
        /// Gets or Sets FilePageNumber
        /// </summary>
        [DataMember(Name="filePageNumber", EmitDefaultValue=false)]
        public int? FilePageNumber { get; set; }

        /// <summary>
        /// Gets or Sets SchemaPageNumber
        /// </summary>
        [DataMember(Name="schemaPageNumber", EmitDefaultValue=false)]
        public int? SchemaPageNumber { get; set; }

        /// <summary>
        /// Gets or Sets SessionID
        /// </summary>
        [DataMember(Name="sessionID", EmitDefaultValue=false)]
        public Guid? SessionID { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedDocumentId
        /// </summary>
        [DataMember(Name="extractedDocumentId", EmitDefaultValue=false)]
        public Guid? ExtractedDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedDocumentFk
        /// </summary>
        [DataMember(Name="extractedDocumentFk", EmitDefaultValue=false)]
        public ExtractedDocument ExtractedDocumentFk { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitId
        /// </summary>
        [DataMember(Name="organizationUnitId", EmitDefaultValue=false)]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitFk
        /// </summary>
        [DataMember(Name="organizationUnitFk", EmitDefaultValue=false)]
        public OrganizationUnit OrganizationUnitFk { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractedDocumentPage {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  FilePageNumber: ").Append(FilePageNumber).Append("\n");
            sb.Append("  SchemaPageNumber: ").Append(SchemaPageNumber).Append("\n");
            sb.Append("  SessionID: ").Append(SessionID).Append("\n");
            sb.Append("  ExtractedDocumentId: ").Append(ExtractedDocumentId).Append("\n");
            sb.Append("  ExtractedDocumentFk: ").Append(ExtractedDocumentFk).Append("\n");
            sb.Append("  OrganizationUnitId: ").Append(OrganizationUnitId).Append("\n");
            sb.Append("  OrganizationUnitFk: ").Append(OrganizationUnitFk).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractedDocumentPage);
        }

        /// <summary>
        /// Returns true if ExtractedDocumentPage instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractedDocumentPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractedDocumentPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.FilePageNumber == input.FilePageNumber ||
                    (this.FilePageNumber != null &&
                    this.FilePageNumber.Equals(input.FilePageNumber))
                ) && 
                (
                    this.SchemaPageNumber == input.SchemaPageNumber ||
                    (this.SchemaPageNumber != null &&
                    this.SchemaPageNumber.Equals(input.SchemaPageNumber))
                ) && 
                (
                    this.SessionID == input.SessionID ||
                    (this.SessionID != null &&
                    this.SessionID.Equals(input.SessionID))
                ) && 
                (
                    this.ExtractedDocumentId == input.ExtractedDocumentId ||
                    (this.ExtractedDocumentId != null &&
                    this.ExtractedDocumentId.Equals(input.ExtractedDocumentId))
                ) && 
                (
                    this.ExtractedDocumentFk == input.ExtractedDocumentFk ||
                    (this.ExtractedDocumentFk != null &&
                    this.ExtractedDocumentFk.Equals(input.ExtractedDocumentFk))
                ) && 
                (
                    this.OrganizationUnitId == input.OrganizationUnitId ||
                    (this.OrganizationUnitId != null &&
                    this.OrganizationUnitId.Equals(input.OrganizationUnitId))
                ) && 
                (
                    this.OrganizationUnitFk == input.OrganizationUnitFk ||
                    (this.OrganizationUnitFk != null &&
                    this.OrganizationUnitFk.Equals(input.OrganizationUnitFk))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.FilePageNumber != null)
                    hashCode = hashCode * 59 + this.FilePageNumber.GetHashCode();
                if (this.SchemaPageNumber != null)
                    hashCode = hashCode * 59 + this.SchemaPageNumber.GetHashCode();
                if (this.SessionID != null)
                    hashCode = hashCode * 59 + this.SessionID.GetHashCode();
                if (this.ExtractedDocumentId != null)
                    hashCode = hashCode * 59 + this.ExtractedDocumentId.GetHashCode();
                if (this.ExtractedDocumentFk != null)
                    hashCode = hashCode * 59 + this.ExtractedDocumentFk.GetHashCode();
                if (this.OrganizationUnitId != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitId.GetHashCode();
                if (this.OrganizationUnitFk != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitFk.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
