/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// AuthenticateModel
    /// </summary>
    [DataContract]
        public partial class AuthenticateModel :  IEquatable<AuthenticateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateModel" /> class.
        /// </summary>
        /// <param name="userNameOrEmailAddress">userNameOrEmailAddress (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="twoFactorVerificationCode">twoFactorVerificationCode.</param>
        /// <param name="rememberClient">rememberClient.</param>
        /// <param name="twoFactorRememberClientToken">twoFactorRememberClientToken.</param>
        /// <param name="singleSignIn">singleSignIn.</param>
        /// <param name="returnUrl">returnUrl.</param>
        /// <param name="captchaResponse">captchaResponse.</param>
        public AuthenticateModel(string userNameOrEmailAddress = default(string), string password = default(string), string twoFactorVerificationCode = default(string), bool? rememberClient = default(bool?), string twoFactorRememberClientToken = default(string), bool? singleSignIn = default(bool?), string returnUrl = default(string), string captchaResponse = default(string))
        {
            // to ensure "userNameOrEmailAddress" is required (not null)
            if (userNameOrEmailAddress == null)
            {
                throw new InvalidDataException("userNameOrEmailAddress is a required property for AuthenticateModel and cannot be null");
            }
            else
            {
                this.UserNameOrEmailAddress = userNameOrEmailAddress;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for AuthenticateModel and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            this.TwoFactorVerificationCode = twoFactorVerificationCode;
            this.RememberClient = rememberClient;
            this.TwoFactorRememberClientToken = twoFactorRememberClientToken;
            this.SingleSignIn = singleSignIn;
            this.ReturnUrl = returnUrl;
            this.CaptchaResponse = captchaResponse;
        }
        
        /// <summary>
        /// Gets or Sets UserNameOrEmailAddress
        /// </summary>
        [DataMember(Name="userNameOrEmailAddress", EmitDefaultValue=false)]
        public string UserNameOrEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorVerificationCode
        /// </summary>
        [DataMember(Name="twoFactorVerificationCode", EmitDefaultValue=false)]
        public string TwoFactorVerificationCode { get; set; }

        /// <summary>
        /// Gets or Sets RememberClient
        /// </summary>
        [DataMember(Name="rememberClient", EmitDefaultValue=false)]
        public bool? RememberClient { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorRememberClientToken
        /// </summary>
        [DataMember(Name="twoFactorRememberClientToken", EmitDefaultValue=false)]
        public string TwoFactorRememberClientToken { get; set; }

        /// <summary>
        /// Gets or Sets SingleSignIn
        /// </summary>
        [DataMember(Name="singleSignIn", EmitDefaultValue=false)]
        public bool? SingleSignIn { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets CaptchaResponse
        /// </summary>
        [DataMember(Name="captchaResponse", EmitDefaultValue=false)]
        public string CaptchaResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticateModel {\n");
            sb.Append("  UserNameOrEmailAddress: ").Append(UserNameOrEmailAddress).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  TwoFactorVerificationCode: ").Append(TwoFactorVerificationCode).Append("\n");
            sb.Append("  RememberClient: ").Append(RememberClient).Append("\n");
            sb.Append("  TwoFactorRememberClientToken: ").Append(TwoFactorRememberClientToken).Append("\n");
            sb.Append("  SingleSignIn: ").Append(SingleSignIn).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  CaptchaResponse: ").Append(CaptchaResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticateModel);
        }

        /// <summary>
        /// Returns true if AuthenticateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserNameOrEmailAddress == input.UserNameOrEmailAddress ||
                    (this.UserNameOrEmailAddress != null &&
                    this.UserNameOrEmailAddress.Equals(input.UserNameOrEmailAddress))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.TwoFactorVerificationCode == input.TwoFactorVerificationCode ||
                    (this.TwoFactorVerificationCode != null &&
                    this.TwoFactorVerificationCode.Equals(input.TwoFactorVerificationCode))
                ) && 
                (
                    this.RememberClient == input.RememberClient ||
                    (this.RememberClient != null &&
                    this.RememberClient.Equals(input.RememberClient))
                ) && 
                (
                    this.TwoFactorRememberClientToken == input.TwoFactorRememberClientToken ||
                    (this.TwoFactorRememberClientToken != null &&
                    this.TwoFactorRememberClientToken.Equals(input.TwoFactorRememberClientToken))
                ) && 
                (
                    this.SingleSignIn == input.SingleSignIn ||
                    (this.SingleSignIn != null &&
                    this.SingleSignIn.Equals(input.SingleSignIn))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.CaptchaResponse == input.CaptchaResponse ||
                    (this.CaptchaResponse != null &&
                    this.CaptchaResponse.Equals(input.CaptchaResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserNameOrEmailAddress != null)
                    hashCode = hashCode * 59 + this.UserNameOrEmailAddress.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.TwoFactorVerificationCode != null)
                    hashCode = hashCode * 59 + this.TwoFactorVerificationCode.GetHashCode();
                if (this.RememberClient != null)
                    hashCode = hashCode * 59 + this.RememberClient.GetHashCode();
                if (this.TwoFactorRememberClientToken != null)
                    hashCode = hashCode * 59 + this.TwoFactorRememberClientToken.GetHashCode();
                if (this.SingleSignIn != null)
                    hashCode = hashCode * 59 + this.SingleSignIn.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.CaptchaResponse != null)
                    hashCode = hashCode * 59 + this.CaptchaResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
