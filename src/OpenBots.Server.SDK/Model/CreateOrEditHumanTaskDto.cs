/* 
 * Openbots Documents Application API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// CreateOrEditHumanTaskDto
    /// </summary>
    [DataContract]
        public partial class CreateOrEditHumanTaskDto :  IEquatable<CreateOrEditHumanTaskDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrEditHumanTaskDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="caseNumber">caseNumber.</param>
        /// <param name="caseType">caseType.</param>
        /// <param name="dueOn">dueOn.</param>
        /// <param name="status">status.</param>
        /// <param name="documentSessionID">documentSessionID.</param>
        /// <param name="assignedTo">assignedTo.</param>
        /// <param name="taskQueueId">taskQueueId.</param>
        /// <param name="organizationUnitId">organizationUnitId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="id">id.</param>
        public CreateOrEditHumanTaskDto(string name = default(string), string description = default(string), string caseNumber = default(string), string caseType = default(string), DateTime? dueOn = default(DateTime?), string status = default(string), Guid? documentSessionID = default(Guid?), string assignedTo = default(string), Guid? taskQueueId = default(Guid?), long? organizationUnitId = default(long?), long? userId = default(long?), Guid? id = default(Guid?))
        {
            this.Name = name;
            this.Description = description;
            this.CaseNumber = caseNumber;
            this.CaseType = caseType;
            this.DueOn = dueOn;
            this.Status = status;
            this.DocumentSessionID = documentSessionID;
            this.AssignedTo = assignedTo;
            this.TaskQueueId = taskQueueId;
            this.OrganizationUnitId = organizationUnitId;
            this.UserId = userId;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CaseNumber
        /// </summary>
        [DataMember(Name="caseNumber", EmitDefaultValue=false)]
        public string CaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets CaseType
        /// </summary>
        [DataMember(Name="caseType", EmitDefaultValue=false)]
        public string CaseType { get; set; }

        /// <summary>
        /// Gets or Sets DueOn
        /// </summary>
        [DataMember(Name="dueOn", EmitDefaultValue=false)]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSessionID
        /// </summary>
        [DataMember(Name="documentSessionID", EmitDefaultValue=false)]
        public Guid? DocumentSessionID { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        [DataMember(Name="assignedTo", EmitDefaultValue=false)]
        public string AssignedTo { get; set; }

        /// <summary>
        /// Gets or Sets TaskQueueId
        /// </summary>
        [DataMember(Name="taskQueueId", EmitDefaultValue=false)]
        public Guid? TaskQueueId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitId
        /// </summary>
        [DataMember(Name="organizationUnitId", EmitDefaultValue=false)]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrEditHumanTaskDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  CaseType: ").Append(CaseType).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DocumentSessionID: ").Append(DocumentSessionID).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  TaskQueueId: ").Append(TaskQueueId).Append("\n");
            sb.Append("  OrganizationUnitId: ").Append(OrganizationUnitId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrEditHumanTaskDto);
        }

        /// <summary>
        /// Returns true if CreateOrEditHumanTaskDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrEditHumanTaskDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrEditHumanTaskDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CaseNumber == input.CaseNumber ||
                    (this.CaseNumber != null &&
                    this.CaseNumber.Equals(input.CaseNumber))
                ) && 
                (
                    this.CaseType == input.CaseType ||
                    (this.CaseType != null &&
                    this.CaseType.Equals(input.CaseType))
                ) && 
                (
                    this.DueOn == input.DueOn ||
                    (this.DueOn != null &&
                    this.DueOn.Equals(input.DueOn))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DocumentSessionID == input.DocumentSessionID ||
                    (this.DocumentSessionID != null &&
                    this.DocumentSessionID.Equals(input.DocumentSessionID))
                ) && 
                (
                    this.AssignedTo == input.AssignedTo ||
                    (this.AssignedTo != null &&
                    this.AssignedTo.Equals(input.AssignedTo))
                ) && 
                (
                    this.TaskQueueId == input.TaskQueueId ||
                    (this.TaskQueueId != null &&
                    this.TaskQueueId.Equals(input.TaskQueueId))
                ) && 
                (
                    this.OrganizationUnitId == input.OrganizationUnitId ||
                    (this.OrganizationUnitId != null &&
                    this.OrganizationUnitId.Equals(input.OrganizationUnitId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CaseNumber != null)
                    hashCode = hashCode * 59 + this.CaseNumber.GetHashCode();
                if (this.CaseType != null)
                    hashCode = hashCode * 59 + this.CaseType.GetHashCode();
                if (this.DueOn != null)
                    hashCode = hashCode * 59 + this.DueOn.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DocumentSessionID != null)
                    hashCode = hashCode * 59 + this.DocumentSessionID.GetHashCode();
                if (this.AssignedTo != null)
                    hashCode = hashCode * 59 + this.AssignedTo.GetHashCode();
                if (this.TaskQueueId != null)
                    hashCode = hashCode * 59 + this.TaskQueueId.GetHashCode();
                if (this.OrganizationUnitId != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
