/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// DocumentContentView
    /// </summary>
    [DataContract]
        public partial class DocumentContentView :  IEquatable<DocumentContentView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentContentView" /> class.
        /// </summary>
        /// <param name="contentVersion">contentVersion.</param>
        /// <param name="isContentReadOnly">isContentReadOnly.</param>
        /// <param name="content">content.</param>
        /// <param name="isVerified">isVerified.</param>
        /// <param name="hasErrors">hasErrors.</param>
        /// <param name="schema">schema.</param>
        /// <param name="entityId">entityId.</param>
        public DocumentContentView(int? contentVersion = default(int?), bool? isContentReadOnly = default(bool?), string content = default(string), bool? isVerified = default(bool?), bool? hasErrors = default(bool?), string schema = default(string), Guid? entityId = default(Guid?))
        {
            this.ContentVersion = contentVersion;
            this.IsContentReadOnly = isContentReadOnly;
            this.Content = content;
            this.IsVerified = isVerified;
            this.HasErrors = hasErrors;
            this.Schema = schema;
            this.EntityId = entityId;
        }
        
        /// <summary>
        /// Gets or Sets ContentVersion
        /// </summary>
        [DataMember(Name="contentVersion", EmitDefaultValue=false)]
        public int? ContentVersion { get; set; }

        /// <summary>
        /// Gets or Sets IsContentReadOnly
        /// </summary>
        [DataMember(Name="isContentReadOnly", EmitDefaultValue=false)]
        public bool? IsContentReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [DataMember(Name="isVerified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets HasErrors
        /// </summary>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public Guid? EntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentContentView {\n");
            sb.Append("  ContentVersion: ").Append(ContentVersion).Append("\n");
            sb.Append("  IsContentReadOnly: ").Append(IsContentReadOnly).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentContentView);
        }

        /// <summary>
        /// Returns true if DocumentContentView instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentContentView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentContentView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentVersion == input.ContentVersion ||
                    (this.ContentVersion != null &&
                    this.ContentVersion.Equals(input.ContentVersion))
                ) && 
                (
                    this.IsContentReadOnly == input.IsContentReadOnly ||
                    (this.IsContentReadOnly != null &&
                    this.IsContentReadOnly.Equals(input.IsContentReadOnly))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentVersion != null)
                    hashCode = hashCode * 59 + this.ContentVersion.GetHashCode();
                if (this.IsContentReadOnly != null)
                    hashCode = hashCode * 59 + this.IsContentReadOnly.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
