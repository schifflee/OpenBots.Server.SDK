/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// FormDetails
    /// </summary>
    [DataContract]
        public partial class FormDetails :  IEquatable<FormDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormDetails" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="edition">edition.</param>
        /// <param name="pages">pages.</param>
        /// <param name="templateLibrary">templateLibrary.</param>
        /// <param name="entityId">entityId.</param>
        /// <param name="formPages">formPages.</param>
        /// <param name="jsonSchema">jsonSchema.</param>
        /// <param name="outputMapping">outputMapping.</param>
        /// <param name="isUnstructured">isUnstructured.</param>
        /// <param name="id">id.</param>
        public FormDetails(string name = default(string), string edition = default(string), int? pages = default(int?), string templateLibrary = default(string), Guid? entityId = default(Guid?), List<FormPageDetails> formPages = default(List<FormPageDetails>), string jsonSchema = default(string), string outputMapping = default(string), bool? isUnstructured = default(bool?), Guid? id = default(Guid?))
        {
            this.Name = name;
            this.Edition = edition;
            this.Pages = pages;
            this.TemplateLibrary = templateLibrary;
            this.EntityId = entityId;
            this.FormPages = formPages;
            this.JsonSchema = jsonSchema;
            this.OutputMapping = outputMapping;
            this.IsUnstructured = isUnstructured;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Edition
        /// </summary>
        [DataMember(Name="edition", EmitDefaultValue=false)]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public int? Pages { get; set; }

        /// <summary>
        /// Gets or Sets TemplateLibrary
        /// </summary>
        [DataMember(Name="templateLibrary", EmitDefaultValue=false)]
        public string TemplateLibrary { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public Guid? EntityId { get; set; }

        /// <summary>
        /// Gets or Sets FormPages
        /// </summary>
        [DataMember(Name="formPages", EmitDefaultValue=false)]
        public List<FormPageDetails> FormPages { get; set; }

        /// <summary>
        /// Gets or Sets JsonSchema
        /// </summary>
        [DataMember(Name="jsonSchema", EmitDefaultValue=false)]
        public string JsonSchema { get; set; }

        /// <summary>
        /// Gets or Sets OutputMapping
        /// </summary>
        [DataMember(Name="outputMapping", EmitDefaultValue=false)]
        public string OutputMapping { get; set; }

        /// <summary>
        /// Gets or Sets IsUnstructured
        /// </summary>
        [DataMember(Name="isUnstructured", EmitDefaultValue=false)]
        public bool? IsUnstructured { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  TemplateLibrary: ").Append(TemplateLibrary).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  FormPages: ").Append(FormPages).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  OutputMapping: ").Append(OutputMapping).Append("\n");
            sb.Append("  IsUnstructured: ").Append(IsUnstructured).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormDetails);
        }

        /// <summary>
        /// Returns true if FormDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FormDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Edition == input.Edition ||
                    (this.Edition != null &&
                    this.Edition.Equals(input.Edition))
                ) && 
                (
                    this.Pages == input.Pages ||
                    (this.Pages != null &&
                    this.Pages.Equals(input.Pages))
                ) && 
                (
                    this.TemplateLibrary == input.TemplateLibrary ||
                    (this.TemplateLibrary != null &&
                    this.TemplateLibrary.Equals(input.TemplateLibrary))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.FormPages == input.FormPages ||
                    this.FormPages != null &&
                    input.FormPages != null &&
                    this.FormPages.SequenceEqual(input.FormPages)
                ) && 
                (
                    this.JsonSchema == input.JsonSchema ||
                    (this.JsonSchema != null &&
                    this.JsonSchema.Equals(input.JsonSchema))
                ) && 
                (
                    this.OutputMapping == input.OutputMapping ||
                    (this.OutputMapping != null &&
                    this.OutputMapping.Equals(input.OutputMapping))
                ) && 
                (
                    this.IsUnstructured == input.IsUnstructured ||
                    (this.IsUnstructured != null &&
                    this.IsUnstructured.Equals(input.IsUnstructured))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Edition != null)
                    hashCode = hashCode * 59 + this.Edition.GetHashCode();
                if (this.Pages != null)
                    hashCode = hashCode * 59 + this.Pages.GetHashCode();
                if (this.TemplateLibrary != null)
                    hashCode = hashCode * 59 + this.TemplateLibrary.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.FormPages != null)
                    hashCode = hashCode * 59 + this.FormPages.GetHashCode();
                if (this.JsonSchema != null)
                    hashCode = hashCode * 59 + this.JsonSchema.GetHashCode();
                if (this.OutputMapping != null)
                    hashCode = hashCode * 59 + this.OutputMapping.GetHashCode();
                if (this.IsUnstructured != null)
                    hashCode = hashCode * 59 + this.IsUnstructured.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
