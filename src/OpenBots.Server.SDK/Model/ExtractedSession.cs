/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ExtractedSession
    /// </summary>
    [DataContract]
        public partial class ExtractedSession :  IEquatable<ExtractedSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractedSession" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="sessionID">sessionID.</param>
        /// <param name="jobStatusID">jobStatusID.</param>
        /// <param name="totalDocuments">totalDocuments.</param>
        /// <param name="totalProcessedDocuments">totalProcessedDocuments.</param>
        /// <param name="totalErrors">totalErrors.</param>
        /// <param name="totalProcessedDoc">totalProcessedDoc.</param>
        /// <param name="totalProcessedForms">totalProcessedForms.</param>
        /// <param name="totalProcessedPng">totalProcessedPng.</param>
        /// <param name="totalProcessedPdf">totalProcessedPdf.</param>
        /// <param name="totalProcessedJpg">totalProcessedJpg.</param>
        /// <param name="messageToNotify">messageToNotify.</param>
        /// <param name="statusAsOnUTC">statusAsOnUTC.</param>
        /// <param name="status">status.</param>
        /// <param name="totalFiles">totalFiles.</param>
        /// <param name="passedFiles">passedFiles.</param>
        /// <param name="failedFiles">failedFiles.</param>
        /// <param name="errorFiles">errorFiles.</param>
        /// <param name="costInCents">costInCents.</param>
        /// <param name="isVerified">isVerified.</param>
        /// <param name="totalOcrCalls">totalOcrCalls.</param>
        /// <param name="totalNERCalls">totalNERCalls.</param>
        /// <param name="startedOnUTC">startedOnUTC.</param>
        /// <param name="completedOnUTC">completedOnUTC.</param>
        /// <param name="enqueuedOnUTC">enqueuedOnUTC.</param>
        /// <param name="sizeInKB">sizeInKB.</param>
        /// <param name="organizationUnitId">organizationUnitId.</param>
        /// <param name="organizationUnitFk">organizationUnitFk.</param>
        /// <param name="id">id.</param>
        public ExtractedSession(int? tenantId = default(int?), Guid? sessionID = default(Guid?), string jobStatusID = default(string), int? totalDocuments = default(int?), int? totalProcessedDocuments = default(int?), int? totalErrors = default(int?), int? totalProcessedDoc = default(int?), int? totalProcessedForms = default(int?), int? totalProcessedPng = default(int?), int? totalProcessedPdf = default(int?), int? totalProcessedJpg = default(int?), string messageToNotify = default(string), DateTime? statusAsOnUTC = default(DateTime?), string status = default(string), int? totalFiles = default(int?), int? passedFiles = default(int?), int? failedFiles = default(int?), int? errorFiles = default(int?), double? costInCents = default(double?), bool? isVerified = default(bool?), int? totalOcrCalls = default(int?), int? totalNERCalls = default(int?), DateTime? startedOnUTC = default(DateTime?), DateTime? completedOnUTC = default(DateTime?), DateTime? enqueuedOnUTC = default(DateTime?), double? sizeInKB = default(double?), long? organizationUnitId = default(long?), OrganizationUnit organizationUnitFk = default(OrganizationUnit), Guid? id = default(Guid?))
        {
            this.TenantId = tenantId;
            this.SessionID = sessionID;
            this.JobStatusID = jobStatusID;
            this.TotalDocuments = totalDocuments;
            this.TotalProcessedDocuments = totalProcessedDocuments;
            this.TotalErrors = totalErrors;
            this.TotalProcessedDoc = totalProcessedDoc;
            this.TotalProcessedForms = totalProcessedForms;
            this.TotalProcessedPng = totalProcessedPng;
            this.TotalProcessedPdf = totalProcessedPdf;
            this.TotalProcessedJpg = totalProcessedJpg;
            this.MessageToNotify = messageToNotify;
            this.StatusAsOnUTC = statusAsOnUTC;
            this.Status = status;
            this.TotalFiles = totalFiles;
            this.PassedFiles = passedFiles;
            this.FailedFiles = failedFiles;
            this.ErrorFiles = errorFiles;
            this.CostInCents = costInCents;
            this.IsVerified = isVerified;
            this.TotalOcrCalls = totalOcrCalls;
            this.TotalNERCalls = totalNERCalls;
            this.StartedOnUTC = startedOnUTC;
            this.CompletedOnUTC = completedOnUTC;
            this.EnqueuedOnUTC = enqueuedOnUTC;
            this.SizeInKB = sizeInKB;
            this.OrganizationUnitId = organizationUnitId;
            this.OrganizationUnitFk = organizationUnitFk;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public int? TenantId { get; set; }

        /// <summary>
        /// Gets or Sets SessionID
        /// </summary>
        [DataMember(Name="sessionID", EmitDefaultValue=false)]
        public Guid? SessionID { get; set; }

        /// <summary>
        /// Gets or Sets JobStatusID
        /// </summary>
        [DataMember(Name="jobStatusID", EmitDefaultValue=false)]
        public string JobStatusID { get; set; }

        /// <summary>
        /// Gets or Sets TotalDocuments
        /// </summary>
        [DataMember(Name="totalDocuments", EmitDefaultValue=false)]
        public int? TotalDocuments { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedDocuments
        /// </summary>
        [DataMember(Name="totalProcessedDocuments", EmitDefaultValue=false)]
        public int? TotalProcessedDocuments { get; set; }

        /// <summary>
        /// Gets or Sets TotalErrors
        /// </summary>
        [DataMember(Name="totalErrors", EmitDefaultValue=false)]
        public int? TotalErrors { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedDoc
        /// </summary>
        [DataMember(Name="totalProcessedDoc", EmitDefaultValue=false)]
        public int? TotalProcessedDoc { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedForms
        /// </summary>
        [DataMember(Name="totalProcessedForms", EmitDefaultValue=false)]
        public int? TotalProcessedForms { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedPng
        /// </summary>
        [DataMember(Name="totalProcessedPng", EmitDefaultValue=false)]
        public int? TotalProcessedPng { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedPdf
        /// </summary>
        [DataMember(Name="totalProcessedPdf", EmitDefaultValue=false)]
        public int? TotalProcessedPdf { get; set; }

        /// <summary>
        /// Gets or Sets TotalProcessedJpg
        /// </summary>
        [DataMember(Name="totalProcessedJpg", EmitDefaultValue=false)]
        public int? TotalProcessedJpg { get; set; }

        /// <summary>
        /// Gets or Sets MessageToNotify
        /// </summary>
        [DataMember(Name="messageToNotify", EmitDefaultValue=false)]
        public string MessageToNotify { get; set; }

        /// <summary>
        /// Gets or Sets StatusAsOnUTC
        /// </summary>
        [DataMember(Name="statusAsOnUTC", EmitDefaultValue=false)]
        public DateTime? StatusAsOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalFiles
        /// </summary>
        [DataMember(Name="totalFiles", EmitDefaultValue=false)]
        public int? TotalFiles { get; set; }

        /// <summary>
        /// Gets or Sets PassedFiles
        /// </summary>
        [DataMember(Name="passedFiles", EmitDefaultValue=false)]
        public int? PassedFiles { get; set; }

        /// <summary>
        /// Gets or Sets FailedFiles
        /// </summary>
        [DataMember(Name="failedFiles", EmitDefaultValue=false)]
        public int? FailedFiles { get; set; }

        /// <summary>
        /// Gets or Sets ErrorFiles
        /// </summary>
        [DataMember(Name="errorFiles", EmitDefaultValue=false)]
        public int? ErrorFiles { get; set; }

        /// <summary>
        /// Gets or Sets CostInCents
        /// </summary>
        [DataMember(Name="costInCents", EmitDefaultValue=false)]
        public double? CostInCents { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [DataMember(Name="isVerified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets TotalOcrCalls
        /// </summary>
        [DataMember(Name="totalOcrCalls", EmitDefaultValue=false)]
        public int? TotalOcrCalls { get; set; }

        /// <summary>
        /// Gets or Sets TotalNERCalls
        /// </summary>
        [DataMember(Name="totalNERCalls", EmitDefaultValue=false)]
        public int? TotalNERCalls { get; set; }

        /// <summary>
        /// Gets or Sets StartedOnUTC
        /// </summary>
        [DataMember(Name="startedOnUTC", EmitDefaultValue=false)]
        public DateTime? StartedOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets CompletedOnUTC
        /// </summary>
        [DataMember(Name="completedOnUTC", EmitDefaultValue=false)]
        public DateTime? CompletedOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets EnqueuedOnUTC
        /// </summary>
        [DataMember(Name="enqueuedOnUTC", EmitDefaultValue=false)]
        public DateTime? EnqueuedOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets SizeInKB
        /// </summary>
        [DataMember(Name="sizeInKB", EmitDefaultValue=false)]
        public double? SizeInKB { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitId
        /// </summary>
        [DataMember(Name="organizationUnitId", EmitDefaultValue=false)]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitFk
        /// </summary>
        [DataMember(Name="organizationUnitFk", EmitDefaultValue=false)]
        public OrganizationUnit OrganizationUnitFk { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractedSession {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  SessionID: ").Append(SessionID).Append("\n");
            sb.Append("  JobStatusID: ").Append(JobStatusID).Append("\n");
            sb.Append("  TotalDocuments: ").Append(TotalDocuments).Append("\n");
            sb.Append("  TotalProcessedDocuments: ").Append(TotalProcessedDocuments).Append("\n");
            sb.Append("  TotalErrors: ").Append(TotalErrors).Append("\n");
            sb.Append("  TotalProcessedDoc: ").Append(TotalProcessedDoc).Append("\n");
            sb.Append("  TotalProcessedForms: ").Append(TotalProcessedForms).Append("\n");
            sb.Append("  TotalProcessedPng: ").Append(TotalProcessedPng).Append("\n");
            sb.Append("  TotalProcessedPdf: ").Append(TotalProcessedPdf).Append("\n");
            sb.Append("  TotalProcessedJpg: ").Append(TotalProcessedJpg).Append("\n");
            sb.Append("  MessageToNotify: ").Append(MessageToNotify).Append("\n");
            sb.Append("  StatusAsOnUTC: ").Append(StatusAsOnUTC).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalFiles: ").Append(TotalFiles).Append("\n");
            sb.Append("  PassedFiles: ").Append(PassedFiles).Append("\n");
            sb.Append("  FailedFiles: ").Append(FailedFiles).Append("\n");
            sb.Append("  ErrorFiles: ").Append(ErrorFiles).Append("\n");
            sb.Append("  CostInCents: ").Append(CostInCents).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  TotalOcrCalls: ").Append(TotalOcrCalls).Append("\n");
            sb.Append("  TotalNERCalls: ").Append(TotalNERCalls).Append("\n");
            sb.Append("  StartedOnUTC: ").Append(StartedOnUTC).Append("\n");
            sb.Append("  CompletedOnUTC: ").Append(CompletedOnUTC).Append("\n");
            sb.Append("  EnqueuedOnUTC: ").Append(EnqueuedOnUTC).Append("\n");
            sb.Append("  SizeInKB: ").Append(SizeInKB).Append("\n");
            sb.Append("  OrganizationUnitId: ").Append(OrganizationUnitId).Append("\n");
            sb.Append("  OrganizationUnitFk: ").Append(OrganizationUnitFk).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractedSession);
        }

        /// <summary>
        /// Returns true if ExtractedSession instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractedSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractedSession input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.SessionID == input.SessionID ||
                    (this.SessionID != null &&
                    this.SessionID.Equals(input.SessionID))
                ) && 
                (
                    this.JobStatusID == input.JobStatusID ||
                    (this.JobStatusID != null &&
                    this.JobStatusID.Equals(input.JobStatusID))
                ) && 
                (
                    this.TotalDocuments == input.TotalDocuments ||
                    (this.TotalDocuments != null &&
                    this.TotalDocuments.Equals(input.TotalDocuments))
                ) && 
                (
                    this.TotalProcessedDocuments == input.TotalProcessedDocuments ||
                    (this.TotalProcessedDocuments != null &&
                    this.TotalProcessedDocuments.Equals(input.TotalProcessedDocuments))
                ) && 
                (
                    this.TotalErrors == input.TotalErrors ||
                    (this.TotalErrors != null &&
                    this.TotalErrors.Equals(input.TotalErrors))
                ) && 
                (
                    this.TotalProcessedDoc == input.TotalProcessedDoc ||
                    (this.TotalProcessedDoc != null &&
                    this.TotalProcessedDoc.Equals(input.TotalProcessedDoc))
                ) && 
                (
                    this.TotalProcessedForms == input.TotalProcessedForms ||
                    (this.TotalProcessedForms != null &&
                    this.TotalProcessedForms.Equals(input.TotalProcessedForms))
                ) && 
                (
                    this.TotalProcessedPng == input.TotalProcessedPng ||
                    (this.TotalProcessedPng != null &&
                    this.TotalProcessedPng.Equals(input.TotalProcessedPng))
                ) && 
                (
                    this.TotalProcessedPdf == input.TotalProcessedPdf ||
                    (this.TotalProcessedPdf != null &&
                    this.TotalProcessedPdf.Equals(input.TotalProcessedPdf))
                ) && 
                (
                    this.TotalProcessedJpg == input.TotalProcessedJpg ||
                    (this.TotalProcessedJpg != null &&
                    this.TotalProcessedJpg.Equals(input.TotalProcessedJpg))
                ) && 
                (
                    this.MessageToNotify == input.MessageToNotify ||
                    (this.MessageToNotify != null &&
                    this.MessageToNotify.Equals(input.MessageToNotify))
                ) && 
                (
                    this.StatusAsOnUTC == input.StatusAsOnUTC ||
                    (this.StatusAsOnUTC != null &&
                    this.StatusAsOnUTC.Equals(input.StatusAsOnUTC))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalFiles == input.TotalFiles ||
                    (this.TotalFiles != null &&
                    this.TotalFiles.Equals(input.TotalFiles))
                ) && 
                (
                    this.PassedFiles == input.PassedFiles ||
                    (this.PassedFiles != null &&
                    this.PassedFiles.Equals(input.PassedFiles))
                ) && 
                (
                    this.FailedFiles == input.FailedFiles ||
                    (this.FailedFiles != null &&
                    this.FailedFiles.Equals(input.FailedFiles))
                ) && 
                (
                    this.ErrorFiles == input.ErrorFiles ||
                    (this.ErrorFiles != null &&
                    this.ErrorFiles.Equals(input.ErrorFiles))
                ) && 
                (
                    this.CostInCents == input.CostInCents ||
                    (this.CostInCents != null &&
                    this.CostInCents.Equals(input.CostInCents))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.TotalOcrCalls == input.TotalOcrCalls ||
                    (this.TotalOcrCalls != null &&
                    this.TotalOcrCalls.Equals(input.TotalOcrCalls))
                ) && 
                (
                    this.TotalNERCalls == input.TotalNERCalls ||
                    (this.TotalNERCalls != null &&
                    this.TotalNERCalls.Equals(input.TotalNERCalls))
                ) && 
                (
                    this.StartedOnUTC == input.StartedOnUTC ||
                    (this.StartedOnUTC != null &&
                    this.StartedOnUTC.Equals(input.StartedOnUTC))
                ) && 
                (
                    this.CompletedOnUTC == input.CompletedOnUTC ||
                    (this.CompletedOnUTC != null &&
                    this.CompletedOnUTC.Equals(input.CompletedOnUTC))
                ) && 
                (
                    this.EnqueuedOnUTC == input.EnqueuedOnUTC ||
                    (this.EnqueuedOnUTC != null &&
                    this.EnqueuedOnUTC.Equals(input.EnqueuedOnUTC))
                ) && 
                (
                    this.SizeInKB == input.SizeInKB ||
                    (this.SizeInKB != null &&
                    this.SizeInKB.Equals(input.SizeInKB))
                ) && 
                (
                    this.OrganizationUnitId == input.OrganizationUnitId ||
                    (this.OrganizationUnitId != null &&
                    this.OrganizationUnitId.Equals(input.OrganizationUnitId))
                ) && 
                (
                    this.OrganizationUnitFk == input.OrganizationUnitFk ||
                    (this.OrganizationUnitFk != null &&
                    this.OrganizationUnitFk.Equals(input.OrganizationUnitFk))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.SessionID != null)
                    hashCode = hashCode * 59 + this.SessionID.GetHashCode();
                if (this.JobStatusID != null)
                    hashCode = hashCode * 59 + this.JobStatusID.GetHashCode();
                if (this.TotalDocuments != null)
                    hashCode = hashCode * 59 + this.TotalDocuments.GetHashCode();
                if (this.TotalProcessedDocuments != null)
                    hashCode = hashCode * 59 + this.TotalProcessedDocuments.GetHashCode();
                if (this.TotalErrors != null)
                    hashCode = hashCode * 59 + this.TotalErrors.GetHashCode();
                if (this.TotalProcessedDoc != null)
                    hashCode = hashCode * 59 + this.TotalProcessedDoc.GetHashCode();
                if (this.TotalProcessedForms != null)
                    hashCode = hashCode * 59 + this.TotalProcessedForms.GetHashCode();
                if (this.TotalProcessedPng != null)
                    hashCode = hashCode * 59 + this.TotalProcessedPng.GetHashCode();
                if (this.TotalProcessedPdf != null)
                    hashCode = hashCode * 59 + this.TotalProcessedPdf.GetHashCode();
                if (this.TotalProcessedJpg != null)
                    hashCode = hashCode * 59 + this.TotalProcessedJpg.GetHashCode();
                if (this.MessageToNotify != null)
                    hashCode = hashCode * 59 + this.MessageToNotify.GetHashCode();
                if (this.StatusAsOnUTC != null)
                    hashCode = hashCode * 59 + this.StatusAsOnUTC.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalFiles != null)
                    hashCode = hashCode * 59 + this.TotalFiles.GetHashCode();
                if (this.PassedFiles != null)
                    hashCode = hashCode * 59 + this.PassedFiles.GetHashCode();
                if (this.FailedFiles != null)
                    hashCode = hashCode * 59 + this.FailedFiles.GetHashCode();
                if (this.ErrorFiles != null)
                    hashCode = hashCode * 59 + this.ErrorFiles.GetHashCode();
                if (this.CostInCents != null)
                    hashCode = hashCode * 59 + this.CostInCents.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.TotalOcrCalls != null)
                    hashCode = hashCode * 59 + this.TotalOcrCalls.GetHashCode();
                if (this.TotalNERCalls != null)
                    hashCode = hashCode * 59 + this.TotalNERCalls.GetHashCode();
                if (this.StartedOnUTC != null)
                    hashCode = hashCode * 59 + this.StartedOnUTC.GetHashCode();
                if (this.CompletedOnUTC != null)
                    hashCode = hashCode * 59 + this.CompletedOnUTC.GetHashCode();
                if (this.EnqueuedOnUTC != null)
                    hashCode = hashCode * 59 + this.EnqueuedOnUTC.GetHashCode();
                if (this.SizeInKB != null)
                    hashCode = hashCode * 59 + this.SizeInKB.GetHashCode();
                if (this.OrganizationUnitId != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitId.GetHashCode();
                if (this.OrganizationUnitFk != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitFk.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
