/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ExtractedFile
    /// </summary>
    [DataContract]
        public partial class ExtractedFile :  IEquatable<ExtractedFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractedFile" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="partitionKey">partitionKey.</param>
        /// <param name="jobRequestID">jobRequestID.</param>
        /// <param name="sessionID">sessionID.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="sizeInKB">sizeInKB.</param>
        /// <param name="fileBlobID">fileBlobID.</param>
        /// <param name="imageBlobContainerID">imageBlobContainerID.</param>
        /// <param name="extractedSessionId">extractedSessionId.</param>
        /// <param name="extractedSessionFk">extractedSessionFk.</param>
        /// <param name="organizationUnitId">organizationUnitId.</param>
        /// <param name="organizationUnitFk">organizationUnitFk.</param>
        /// <param name="id">id.</param>
        public ExtractedFile(int? tenantId = default(int?), string partitionKey = default(string), string jobRequestID = default(string), Guid? sessionID = default(Guid?), string fileName = default(string), string fileType = default(string), DateTime? timestamp = default(DateTime?), double? sizeInKB = default(double?), Guid? fileBlobID = default(Guid?), Guid? imageBlobContainerID = default(Guid?), Guid? extractedSessionId = default(Guid?), ExtractedSession extractedSessionFk = default(ExtractedSession), long? organizationUnitId = default(long?), OrganizationUnit organizationUnitFk = default(OrganizationUnit), Guid? id = default(Guid?))
        {
            this.TenantId = tenantId;
            this.PartitionKey = partitionKey;
            this.JobRequestID = jobRequestID;
            this.SessionID = sessionID;
            this.FileName = fileName;
            this.FileType = fileType;
            this.Timestamp = timestamp;
            this.SizeInKB = sizeInKB;
            this.FileBlobID = fileBlobID;
            this.ImageBlobContainerID = imageBlobContainerID;
            this.ExtractedSessionId = extractedSessionId;
            this.ExtractedSessionFk = extractedSessionFk;
            this.OrganizationUnitId = organizationUnitId;
            this.OrganizationUnitFk = organizationUnitFk;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public int? TenantId { get; set; }

        /// <summary>
        /// Gets or Sets PartitionKey
        /// </summary>
        [DataMember(Name="partitionKey", EmitDefaultValue=false)]
        public string PartitionKey { get; set; }

        /// <summary>
        /// Gets or Sets JobRequestID
        /// </summary>
        [DataMember(Name="jobRequestID", EmitDefaultValue=false)]
        public string JobRequestID { get; set; }

        /// <summary>
        /// Gets or Sets SessionID
        /// </summary>
        [DataMember(Name="sessionID", EmitDefaultValue=false)]
        public Guid? SessionID { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name="fileType", EmitDefaultValue=false)]
        public string FileType { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SizeInKB
        /// </summary>
        [DataMember(Name="sizeInKB", EmitDefaultValue=false)]
        public double? SizeInKB { get; set; }

        /// <summary>
        /// Gets or Sets FileBlobID
        /// </summary>
        [DataMember(Name="fileBlobID", EmitDefaultValue=false)]
        public Guid? FileBlobID { get; set; }

        /// <summary>
        /// Gets or Sets ImageBlobContainerID
        /// </summary>
        [DataMember(Name="imageBlobContainerID", EmitDefaultValue=false)]
        public Guid? ImageBlobContainerID { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedSessionId
        /// </summary>
        [DataMember(Name="extractedSessionId", EmitDefaultValue=false)]
        public Guid? ExtractedSessionId { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedSessionFk
        /// </summary>
        [DataMember(Name="extractedSessionFk", EmitDefaultValue=false)]
        public ExtractedSession ExtractedSessionFk { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitId
        /// </summary>
        [DataMember(Name="organizationUnitId", EmitDefaultValue=false)]
        public long? OrganizationUnitId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnitFk
        /// </summary>
        [DataMember(Name="organizationUnitFk", EmitDefaultValue=false)]
        public OrganizationUnit OrganizationUnitFk { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractedFile {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  PartitionKey: ").Append(PartitionKey).Append("\n");
            sb.Append("  JobRequestID: ").Append(JobRequestID).Append("\n");
            sb.Append("  SessionID: ").Append(SessionID).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SizeInKB: ").Append(SizeInKB).Append("\n");
            sb.Append("  FileBlobID: ").Append(FileBlobID).Append("\n");
            sb.Append("  ImageBlobContainerID: ").Append(ImageBlobContainerID).Append("\n");
            sb.Append("  ExtractedSessionId: ").Append(ExtractedSessionId).Append("\n");
            sb.Append("  ExtractedSessionFk: ").Append(ExtractedSessionFk).Append("\n");
            sb.Append("  OrganizationUnitId: ").Append(OrganizationUnitId).Append("\n");
            sb.Append("  OrganizationUnitFk: ").Append(OrganizationUnitFk).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractedFile);
        }

        /// <summary>
        /// Returns true if ExtractedFile instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractedFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractedFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.PartitionKey == input.PartitionKey ||
                    (this.PartitionKey != null &&
                    this.PartitionKey.Equals(input.PartitionKey))
                ) && 
                (
                    this.JobRequestID == input.JobRequestID ||
                    (this.JobRequestID != null &&
                    this.JobRequestID.Equals(input.JobRequestID))
                ) && 
                (
                    this.SessionID == input.SessionID ||
                    (this.SessionID != null &&
                    this.SessionID.Equals(input.SessionID))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.SizeInKB == input.SizeInKB ||
                    (this.SizeInKB != null &&
                    this.SizeInKB.Equals(input.SizeInKB))
                ) && 
                (
                    this.FileBlobID == input.FileBlobID ||
                    (this.FileBlobID != null &&
                    this.FileBlobID.Equals(input.FileBlobID))
                ) && 
                (
                    this.ImageBlobContainerID == input.ImageBlobContainerID ||
                    (this.ImageBlobContainerID != null &&
                    this.ImageBlobContainerID.Equals(input.ImageBlobContainerID))
                ) && 
                (
                    this.ExtractedSessionId == input.ExtractedSessionId ||
                    (this.ExtractedSessionId != null &&
                    this.ExtractedSessionId.Equals(input.ExtractedSessionId))
                ) && 
                (
                    this.ExtractedSessionFk == input.ExtractedSessionFk ||
                    (this.ExtractedSessionFk != null &&
                    this.ExtractedSessionFk.Equals(input.ExtractedSessionFk))
                ) && 
                (
                    this.OrganizationUnitId == input.OrganizationUnitId ||
                    (this.OrganizationUnitId != null &&
                    this.OrganizationUnitId.Equals(input.OrganizationUnitId))
                ) && 
                (
                    this.OrganizationUnitFk == input.OrganizationUnitFk ||
                    (this.OrganizationUnitFk != null &&
                    this.OrganizationUnitFk.Equals(input.OrganizationUnitFk))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.PartitionKey != null)
                    hashCode = hashCode * 59 + this.PartitionKey.GetHashCode();
                if (this.JobRequestID != null)
                    hashCode = hashCode * 59 + this.JobRequestID.GetHashCode();
                if (this.SessionID != null)
                    hashCode = hashCode * 59 + this.SessionID.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.SizeInKB != null)
                    hashCode = hashCode * 59 + this.SizeInKB.GetHashCode();
                if (this.FileBlobID != null)
                    hashCode = hashCode * 59 + this.FileBlobID.GetHashCode();
                if (this.ImageBlobContainerID != null)
                    hashCode = hashCode * 59 + this.ImageBlobContainerID.GetHashCode();
                if (this.ExtractedSessionId != null)
                    hashCode = hashCode * 59 + this.ExtractedSessionId.GetHashCode();
                if (this.ExtractedSessionFk != null)
                    hashCode = hashCode * 59 + this.ExtractedSessionFk.GetHashCode();
                if (this.OrganizationUnitId != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitId.GetHashCode();
                if (this.OrganizationUnitFk != null)
                    hashCode = hashCode * 59 + this.OrganizationUnitFk.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
