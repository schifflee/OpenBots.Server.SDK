/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// CreateJobViewModel
    /// </summary>
    [DataContract]
    public partial class CreateJobViewModel : IEquatable<CreateJobViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateJobViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="agentId">agentId (required).</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="enqueueTime">enqueueTime.</param>
        /// <param name="dequeueTime">dequeueTime.</param>
        /// <param name="automationId">automationId (required).</param>
        /// <param name="jobStatus">jobStatus.</param>
        /// <param name="message">message.</param>
        /// <param name="isSuccessful">isSuccessful.</param>
        /// <param name="jobParameters">jobParameters.</param>
        public CreateJobViewModel(Guid? id = default(Guid?), Guid? agentId = default(Guid?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? enqueueTime = default(DateTime?), DateTime? dequeueTime = default(DateTime?), Guid? automationId = default(Guid?), JobStatusType jobStatus = default(JobStatusType), string message = default(string), bool? isSuccessful = default(bool?), List<JobParameter> jobParameters = default(List<JobParameter>))
        {
            // to ensure "agentId" is required (not null)
            if (agentId == null)
            {
                throw new InvalidDataException("agentId is a required property for CreateJobViewModel and cannot be null");
            }
            else
            {
                this.AgentId = agentId;
            }
            // to ensure "automationId" is required (not null)
            if (automationId == null)
            {
                throw new InvalidDataException("automationId is a required property for CreateJobViewModel and cannot be null");
            }
            else
            {
                this.AutomationId = automationId;
            }
            this.Id = id;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.EnqueueTime = enqueueTime;
            this.DequeueTime = dequeueTime;
            this.JobStatus = jobStatus;
            this.Message = message;
            this.IsSuccessful = isSuccessful;
            this.JobParameters = jobParameters;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets AgentId
        /// </summary>
        [DataMember(Name = "agentId", EmitDefaultValue = false)]
        public Guid? AgentId { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets EnqueueTime
        /// </summary>
        [DataMember(Name = "enqueueTime", EmitDefaultValue = false)]
        public DateTime? EnqueueTime { get; set; }

        /// <summary>
        /// Gets or Sets DequeueTime
        /// </summary>
        [DataMember(Name = "dequeueTime", EmitDefaultValue = false)]
        public DateTime? DequeueTime { get; set; }

        /// <summary>
        /// Gets or Sets AutomationId
        /// </summary>
        [DataMember(Name = "automationId", EmitDefaultValue = false)]
        public Guid? AutomationId { get; set; }

        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name = "jobStatus", EmitDefaultValue = false)]
        public JobStatusType JobStatus { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets IsSuccessful
        /// </summary>
        [DataMember(Name = "isSuccessful", EmitDefaultValue = false)]
        public bool? IsSuccessful { get; set; }

        /// <summary>
        /// Gets or Sets JobParameters
        /// </summary>
        [DataMember(Name = "jobParameters", EmitDefaultValue = false)]
        public List<JobParameter> JobParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateJobViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EnqueueTime: ").Append(EnqueueTime).Append("\n");
            sb.Append("  DequeueTime: ").Append(DequeueTime).Append("\n");
            sb.Append("  AutomationId: ").Append(AutomationId).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsSuccessful: ").Append(IsSuccessful).Append("\n");
            sb.Append("  JobParameters: ").Append(JobParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateJobViewModel);
        }

        /// <summary>
        /// Returns true if CreateJobViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateJobViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateJobViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) &&
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) &&
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) &&
                (
                    this.EnqueueTime == input.EnqueueTime ||
                    (this.EnqueueTime != null &&
                    this.EnqueueTime.Equals(input.EnqueueTime))
                ) &&
                (
                    this.DequeueTime == input.DequeueTime ||
                    (this.DequeueTime != null &&
                    this.DequeueTime.Equals(input.DequeueTime))
                ) &&
                (
                    this.AutomationId == input.AutomationId ||
                    (this.AutomationId != null &&
                    this.AutomationId.Equals(input.AutomationId))
                ) &&
                (
                    this.JobStatus == input.JobStatus ||
                    (this.JobStatus != null &&
                    this.JobStatus.Equals(input.JobStatus))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.IsSuccessful == input.IsSuccessful ||
                    (this.IsSuccessful != null &&
                    this.IsSuccessful.Equals(input.IsSuccessful))
                ) &&
                (
                    this.JobParameters == input.JobParameters ||
                    this.JobParameters != null &&
                    input.JobParameters != null &&
                    this.JobParameters.SequenceEqual(input.JobParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.EnqueueTime != null)
                    hashCode = hashCode * 59 + this.EnqueueTime.GetHashCode();
                if (this.DequeueTime != null)
                    hashCode = hashCode * 59 + this.DequeueTime.GetHashCode();
                if (this.AutomationId != null)
                    hashCode = hashCode * 59 + this.AutomationId.GetHashCode();
                if (this.JobStatus != null)
                    hashCode = hashCode * 59 + this.JobStatus.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.IsSuccessful != null)
                    hashCode = hashCode * 59 + this.IsSuccessful.GetHashCode();
                if (this.JobParameters != null)
                    hashCode = hashCode * 59 + this.JobParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
