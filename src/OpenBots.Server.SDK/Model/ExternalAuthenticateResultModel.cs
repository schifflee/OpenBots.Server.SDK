/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// ExternalAuthenticateResultModel
    /// </summary>
    [DataContract]
        public partial class ExternalAuthenticateResultModel :  IEquatable<ExternalAuthenticateResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAuthenticateResultModel" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken.</param>
        /// <param name="encryptedAccessToken">encryptedAccessToken.</param>
        /// <param name="expireInSeconds">expireInSeconds.</param>
        /// <param name="waitingForActivation">waitingForActivation.</param>
        /// <param name="returnUrl">returnUrl.</param>
        /// <param name="refreshToken">refreshToken.</param>
        /// <param name="refreshTokenExpireInSeconds">refreshTokenExpireInSeconds.</param>
        public ExternalAuthenticateResultModel(string accessToken = default(string), string encryptedAccessToken = default(string), int? expireInSeconds = default(int?), bool? waitingForActivation = default(bool?), string returnUrl = default(string), string refreshToken = default(string), int? refreshTokenExpireInSeconds = default(int?))
        {
            this.AccessToken = accessToken;
            this.EncryptedAccessToken = encryptedAccessToken;
            this.ExpireInSeconds = expireInSeconds;
            this.WaitingForActivation = waitingForActivation;
            this.ReturnUrl = returnUrl;
            this.RefreshToken = refreshToken;
            this.RefreshTokenExpireInSeconds = refreshTokenExpireInSeconds;
        }
        
        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedAccessToken
        /// </summary>
        [DataMember(Name="encryptedAccessToken", EmitDefaultValue=false)]
        public string EncryptedAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets ExpireInSeconds
        /// </summary>
        [DataMember(Name="expireInSeconds", EmitDefaultValue=false)]
        public int? ExpireInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets WaitingForActivation
        /// </summary>
        [DataMember(Name="waitingForActivation", EmitDefaultValue=false)]
        public bool? WaitingForActivation { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refreshToken", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpireInSeconds
        /// </summary>
        [DataMember(Name="refreshTokenExpireInSeconds", EmitDefaultValue=false)]
        public int? RefreshTokenExpireInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalAuthenticateResultModel {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  EncryptedAccessToken: ").Append(EncryptedAccessToken).Append("\n");
            sb.Append("  ExpireInSeconds: ").Append(ExpireInSeconds).Append("\n");
            sb.Append("  WaitingForActivation: ").Append(WaitingForActivation).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RefreshTokenExpireInSeconds: ").Append(RefreshTokenExpireInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalAuthenticateResultModel);
        }

        /// <summary>
        /// Returns true if ExternalAuthenticateResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalAuthenticateResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalAuthenticateResultModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.EncryptedAccessToken == input.EncryptedAccessToken ||
                    (this.EncryptedAccessToken != null &&
                    this.EncryptedAccessToken.Equals(input.EncryptedAccessToken))
                ) && 
                (
                    this.ExpireInSeconds == input.ExpireInSeconds ||
                    (this.ExpireInSeconds != null &&
                    this.ExpireInSeconds.Equals(input.ExpireInSeconds))
                ) && 
                (
                    this.WaitingForActivation == input.WaitingForActivation ||
                    (this.WaitingForActivation != null &&
                    this.WaitingForActivation.Equals(input.WaitingForActivation))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.RefreshTokenExpireInSeconds == input.RefreshTokenExpireInSeconds ||
                    (this.RefreshTokenExpireInSeconds != null &&
                    this.RefreshTokenExpireInSeconds.Equals(input.RefreshTokenExpireInSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.EncryptedAccessToken != null)
                    hashCode = hashCode * 59 + this.EncryptedAccessToken.GetHashCode();
                if (this.ExpireInSeconds != null)
                    hashCode = hashCode * 59 + this.ExpireInSeconds.GetHashCode();
                if (this.WaitingForActivation != null)
                    hashCode = hashCode * 59 + this.WaitingForActivation.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.RefreshTokenExpireInSeconds != null)
                    hashCode = hashCode * 59 + this.RefreshTokenExpireInSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
