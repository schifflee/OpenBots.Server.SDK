/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using Newtonsoft.Json;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        Asset ApiVapiVersionAssetsAddAgentAssetPost (string apiVersion);

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> ApiVapiVersionAssetsAddAgentAssetPostWithHttpInfo (string apiVersion);
        /// <summary>
        /// Provides a count of Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiVapiVersionAssetsCountGet (string apiVersion, string filter = null);

        /// <summary>
        /// Provides a count of Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiVapiVersionAssetsCountGetWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Provides a list of all Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AssetPaginatedList</returns>
        AssetPaginatedList ApiVapiVersionAssetsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AssetPaginatedList</returns>
        ApiResponse<AssetPaginatedList> ApiVapiVersionAssetsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name
        /// </summary>
        /// <remarks>
        /// If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Asset</returns>
        Asset ApiVapiVersionAssetsGetAssetByNameAssetNameGet (string assetName, string apiVersion, string assetType = null);

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name
        /// </summary>
        /// <remarks>
        /// If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> ApiVapiVersionAssetsGetAssetByNameAssetNameGetWithHttpInfo (string assetName, string apiVersion, string assetType = null);
        /// <summary>
        /// Add the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdAddPut (string id, string apiVersion, int? value = null);

        /// <summary>
        /// Add the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdAddPutWithHttpInfo (string id, string apiVersion, int? value = null);
        /// <summary>
        /// Append the text value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdAppendPut (string id, string apiVersion, string value = null);

        /// <summary>
        /// Append the text value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdAppendPutWithHttpInfo (string id, string apiVersion, string value = null);
        /// <summary>
        /// Decrement the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdDecrementPut (string id, string apiVersion);

        /// <summary>
        /// Decrement the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdDecrementPutWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Deletes an Asset with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdDelete (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Deletes an Asset with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Increment the number value of an Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdIncrementPut (string id, string apiVersion);

        /// <summary>
        /// Increment the number value of an Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdIncrementPutWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Updates partial details of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdPatch (string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdPatchWithHttpInfo (string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Updates an Asset
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdPut (string id, string apiVersion, Asset body = null);

        /// <summary>
        /// Updates an Asset
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdPutWithHttpInfo (string id, string apiVersion, Asset body = null);
        /// <summary>
        /// Subtract the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAssetsIdSubtractPut (string id, string apiVersion, int? value = null);

        /// <summary>
        /// Subtract the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAssetsIdSubtractPutWithHttpInfo (string id, string apiVersion, int? value = null);
        /// <summary>
        /// Updates an Asset with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        Asset ApiVapiVersionAssetsIdUpdatePut (string id, string apiVersion);

        /// <summary>
        /// Updates an Asset with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> ApiVapiVersionAssetsIdUpdatePutWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Create a new Asset entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>GlobalAssetViewModel</returns>
        GlobalAssetViewModel ApiVapiVersionAssetsPost (string apiVersion);

        /// <summary>
        /// Create a new Asset entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of GlobalAssetViewModel</returns>
        ApiResponse<GlobalAssetViewModel> ApiVapiVersionAssetsPostWithHttpInfo (string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>AssetViewModelPaginatedList</returns>
        AssetViewModelPaginatedList ApiVapiVersionAssetsViewAssetIdGet (string assetId, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AssetViewModelPaginatedList</returns>
        ApiResponse<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewAssetIdGetWithHttpInfo (string assetId, string apiVersion);
        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AssetViewModelPaginatedList</returns>
        AssetViewModelPaginatedList ApiVapiVersionAssetsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AssetViewModelPaginatedList</returns>
        ApiResponse<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Export/download an Asset file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        System.IO.MemoryStream ExportAsset (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Export/download an Asset file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        ApiResponse<System.IO.MemoryStream> ExportAssetWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        Asset GetAsset (string id, string apiVersion);

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> GetAssetWithHttpInfo (string id, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsAddAgentAssetPostAsync (string apiVersion);

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsAddAgentAssetPostAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Provides a count of Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiVapiVersionAssetsCountGetAsync (string apiVersion, string filter = null);

        /// <summary>
        /// Provides a count of Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiVapiVersionAssetsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Provides a list of all Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AssetPaginatedList</returns>
        System.Threading.Tasks.Task<AssetPaginatedList> ApiVapiVersionAssetsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AssetPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetPaginatedList>> ApiVapiVersionAssetsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name
        /// </summary>
        /// <remarks>
        /// If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsGetAssetByNameAssetNameGetAsync (string assetName, string apiVersion, string organizationId, string assetType = null);

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name
        /// </summary>
        /// <remarks>
        /// If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsGetAssetByNameAssetNameGetAsyncWithHttpInfo (string assetName, string apiVersion, string organizationId, string assetType = null);
        /// <summary>
        /// Add the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdAddPutAsync (string id, string apiVersion, string organizationId, int? value = null);

        /// <summary>
        /// Add the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdAddPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, int? value = null);
        /// <summary>
        /// Append the text value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdAppendPutAsync (string id, string apiVersion, string organizationId, string value = null);

        /// <summary>
        /// Append the text value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdAppendPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string value = null);
        /// <summary>
        /// Decrement the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdDecrementPutAsync (string id, string apiVersion, string organizationId);

        /// <summary>
        /// Decrement the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdDecrementPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId);
        /// <summary>
        /// Deletes an Asset with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdDeleteAsync (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Deletes an Asset with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Increment the number value of an Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdIncrementPutAsync (string id, string apiVersion, string organizationId);

        /// <summary>
        /// Increment the number value of an Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdIncrementPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId);
        /// <summary>
        /// Updates partial details of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdPatchAsync (string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdPatchAsyncWithHttpInfo (string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Updates an Asset
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdPutAsync (string id, string apiVersion, string organizationId, Asset body = null);

        /// <summary>
        /// Updates an Asset
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, Asset body = null);
        /// <summary>
        /// Subtract the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdSubtractPutAsync (string id, string apiVersion, string organizationId, int? value = null);

        /// <summary>
        /// Subtract the number value of Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdSubtractPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, int? value = null);
        /// <summary>
        /// Updates an Asset with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsIdUpdatePutAsync (string id, string apiVersion, string organizationId, string name, string type, Guid? fileId, System.IO.FileStream _file);

        /// <summary>
        /// Updates an Asset with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsIdUpdatePutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string name, string type, Guid? fileId, System.IO.FileStream _file);
        /// <summary>
        /// Create a new Asset entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of GlobalAssetViewModel</returns>
        System.Threading.Tasks.Task<GlobalAssetViewModel> ApiVapiVersionAssetsPostAsync (string apiVersion);

        /// <summary>
        /// Create a new Asset entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (GlobalAssetViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalAssetViewModel>> ApiVapiVersionAssetsPostAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AssetViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewAssetIdGetAsync (string assetId, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AssetViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetViewModelPaginatedList>> ApiVapiVersionAssetsViewAssetIdGetAsyncWithHttpInfo (string assetId, string apiVersion);
        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AssetViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AssetViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetViewModelPaginatedList>> ApiVapiVersionAssetsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Export/download an Asset file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        System.Threading.Tasks.Task<System.IO.MemoryStream> ExportAssetAsync (string id, string apiVersion, string organizationId, string driveName = null);

        /// <summary>
        /// Export/download an Asset file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportAssetAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string driveName = null);
        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetAsync (string id, string apiVersion);

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetAsyncWithHttpInfo (string id, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssetsApi : IAssetsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        public Asset ApiVapiVersionAssetsAddAgentAssetPost (string apiVersion)
        {
             ApiResponse<Asset> localVarResponse = ApiVapiVersionAssetsAddAgentAssetPostWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse< Asset > ApiVapiVersionAssetsAddAgentAssetPostWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsAddAgentAssetPost");

            var localVarPath = "/api/v{apiVersion}/Assets/AddAgentAsset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (textValue != null) localVarFormParams.Add("TextValue", this.Configuration.ApiClient.ParameterToString(textValue)); // form parameter
            //if (numberValue != null) localVarFormParams.Add("NumberValue", this.Configuration.ApiClient.ParameterToString(numberValue)); // form parameter
            //if (jsonValue != null) localVarFormParams.Add("JsonValue", this.Configuration.ApiClient.ParameterToString(jsonValue)); // form parameter
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (agentId != null) localVarFormParams.Add("AgentId", this.Configuration.ApiClient.ParameterToString(agentId)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsAddAgentAssetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsAddAgentAssetPostAsync (string apiVersion)
        {
             ApiResponse<Asset> localVarResponse = await ApiVapiVersionAssetsAddAgentAssetPostAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new agent Asset if a global Asset exists for the given name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsAddAgentAssetPostAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsAddAgentAssetPost");

            var localVarPath = "/api/v{apiVersion}/Assets/AddAgentAsset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (textValue != null) localVarFormParams.Add("TextValue", this.Configuration.ApiClient.ParameterToString(textValue)); // form parameter
            //if (numberValue != null) localVarFormParams.Add("NumberValue", this.Configuration.ApiClient.ParameterToString(numberValue)); // form parameter
            //if (jsonValue != null) localVarFormParams.Add("JsonValue", this.Configuration.ApiClient.ParameterToString(jsonValue)); // form parameter
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (agentId != null) localVarFormParams.Add("AgentId", this.Configuration.ApiClient.ParameterToString(agentId)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsAddAgentAssetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Provides a count of Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiVapiVersionAssetsCountGet (string apiVersion, string filter = null)
        {
             ApiResponse<int?> localVarResponse = ApiVapiVersionAssetsCountGetWithHttpInfo(apiVersion, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a count of Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > ApiVapiVersionAssetsCountGetWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsCountGet");

            var localVarPath = "/api/v{apiVersion}/Assets/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a count of Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiVapiVersionAssetsCountGetAsync (string apiVersion, string filter = null)
        {
             ApiResponse<int?> localVarResponse = await ApiVapiVersionAssetsCountGetAsyncWithHttpInfo(apiVersion, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a count of Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiVapiVersionAssetsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsCountGet");

            var localVarPath = "/api/v{apiVersion}/Assets/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a list of all Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AssetPaginatedList</returns>
        public AssetPaginatedList ApiVapiVersionAssetsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AssetPaginatedList> localVarResponse = ApiVapiVersionAssetsGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AssetPaginatedList</returns>
        public ApiResponse< AssetPaginatedList > ApiVapiVersionAssetsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsGet");

            var localVarPath = "/api/v{apiVersion}/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AssetPaginatedList</returns>
        public async System.Threading.Tasks.Task<AssetPaginatedList> ApiVapiVersionAssetsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AssetPaginatedList> localVarResponse = await ApiVapiVersionAssetsGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all Assets 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AssetPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetPaginatedList>> ApiVapiVersionAssetsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsGet");

            var localVarPath = "/api/v{apiVersion}/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetPaginatedList)));
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Asset</returns>
        public Asset ApiVapiVersionAssetsGetAssetByNameAssetNameGet (string assetName, string apiVersion, string assetType = null)
        {
             ApiResponse<Asset> localVarResponse = ApiVapiVersionAssetsGetAssetByNameAssetNameGetWithHttpInfo(assetName, apiVersion, assetType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse< Asset > ApiVapiVersionAssetsGetAssetByNameAssetNameGetWithHttpInfo (string assetName, string apiVersion, string assetType = null)
        {
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->ApiVapiVersionAssetsGetAssetByNameAssetNameGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsGetAssetByNameAssetNameGet");

            var localVarPath = "/api/v{apiVersion}/Assets/GetAssetByName/{assetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetName != null) localVarPathParams.Add("assetName", this.Configuration.ApiClient.ParameterToString(assetName)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsGetAssetByNameAssetNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsGetAssetByNameAssetNameGetAsync (string assetName, string apiVersion, string organizationId, string assetType = null)
        {
             ApiResponse<Asset> localVarResponse = await ApiVapiVersionAssetsGetAssetByNameAssetNameGetAsyncWithHttpInfo(assetName, apiVersion, organizationId, assetType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset name If the requesting user is an Agent with an existing Asset, then that value will be returned
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetName">Asset name</param>
        /// <param name="apiVersion"></param>
        /// <param name="assetType">Asset type (optional)</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsGetAssetByNameAssetNameGetAsyncWithHttpInfo (string assetName, string apiVersion, string organizationId, string assetType = null)
        {
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->ApiVapiVersionAssetsGetAssetByNameAssetNameGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsGetAssetByNameAssetNameGet");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/GetAssetByName/{assetName}";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/GetAssetByName/{assetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetName != null) localVarPathParams.Add("assetName", this.Configuration.ApiClient.ParameterToString(assetName)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Add the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdAddPut (string id, string apiVersion, int? value = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdAddPutWithHttpInfo(id, apiVersion, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdAddPutWithHttpInfo (string id, string apiVersion, int? value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdAddPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdAddPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Add the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdAddPutAsync (string id, string apiVersion, string organizationId, int? value = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdAddPutAsyncWithHttpInfo(id, apiVersion, organizationId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdAddPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, int? value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdAddPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdAddPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Add";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Append the text value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdAppendPut (string id, string apiVersion, string value = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdAppendPutWithHttpInfo(id, apiVersion, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append the text value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdAppendPutWithHttpInfo (string id, string apiVersion, string value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdAppendPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdAppendPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Append";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdAppendPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Append the text value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdAppendPutAsync (string id, string apiVersion, string organizationId, string value = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdAppendPutAsyncWithHttpInfo(id, apiVersion, organizationId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append the text value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdAppendPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdAppendPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdAppendPut");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/{id}/Append";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Append";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppendAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Decrement the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdDecrementPut (string id, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdDecrementPutWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrement the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdDecrementPutWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdDecrementPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdDecrementPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Decrement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdDecrementPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Decrement the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdDecrementPutAsync (string id, string apiVersion, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdDecrementPutAsyncWithHttpInfo(id, apiVersion, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrement the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdDecrementPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdDecrementPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdDecrementPut");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/{id}/Decrement";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Decrement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DecrementAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes an Asset with a specified id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdDelete (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdDeleteWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Asset with a specified id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdDelete");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes an Asset with a specified id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdDeleteAsync (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdDeleteAsyncWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an Asset with a specified id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdDelete");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Increment the number value of an Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdIncrementPut (string id, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdIncrementPutWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Increment the number value of an Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdIncrementPutWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdIncrementPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdIncrementPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Increment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdIncrementPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Increment the number value of an Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdIncrementPutAsync (string id, string apiVersion, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdIncrementPutAsyncWithHttpInfo(id, apiVersion, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Increment the number value of an Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdIncrementPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdIncrementPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdIncrementPut");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/{id}/Increment";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Increment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncrementAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdPatch (string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdPatchWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdPatchWithHttpInfo (string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdPatch");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdPatchAsync (string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdPatchAsyncWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdPatchAsyncWithHttpInfo (string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdPatch");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Asset Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdPut (string id, string apiVersion, Asset body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdPutWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Asset Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdPutWithHttpInfo (string id, string apiVersion, Asset body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Asset Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdPutAsync (string id, string apiVersion, string organizationId, Asset body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdPutAsyncWithHttpInfo(id, apiVersion, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Asset Provides an action to update an Asset, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Asset details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, Asset body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdPut");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/{id}";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Subtract the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAssetsIdSubtractPut (string id, string apiVersion, int? value = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAssetsIdSubtractPutWithHttpInfo(id, apiVersion, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subtract the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAssetsIdSubtractPutWithHttpInfo (string id, string apiVersion, int? value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdSubtractPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdSubtractPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Subtract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdSubtractPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Subtract the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAssetsIdSubtractPutAsync (string id, string apiVersion, string organizationId, int? value = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAssetsIdSubtractPutAsyncWithHttpInfo(id, apiVersion, organizationId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subtract the number value of Asset 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="value">Value of the Asset to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAssetsIdSubtractPutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, int? value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdSubtractPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdSubtractPut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Subtract";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Subtract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubtractAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Asset with file Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        public Asset ApiVapiVersionAssetsIdUpdatePut (string id, string apiVersion)
        {
             ApiResponse<Asset> localVarResponse = ApiVapiVersionAssetsIdUpdatePutWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Asset with file Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse< Asset > ApiVapiVersionAssetsIdUpdatePutWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdUpdatePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdUpdatePut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (type != null) localVarFormParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            //if (textValue != null) localVarFormParams.Add("TextValue", this.Configuration.ApiClient.ParameterToString(textValue)); // form parameter
            //if (numberValue != null) localVarFormParams.Add("NumberValue", this.Configuration.ApiClient.ParameterToString(numberValue)); // form parameter
            //if (jsonValue != null) localVarFormParams.Add("JsonValue", this.Configuration.ApiClient.ParameterToString(jsonValue)); // form parameter
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsIdUpdatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Updates an Asset with file Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> ApiVapiVersionAssetsIdUpdatePutAsync (string id, string apiVersion, string organizationId, string name, string type, Guid? fileId, System.IO.FileStream _file)
        {
             ApiResponse<Asset> localVarResponse = await ApiVapiVersionAssetsIdUpdatePutAsyncWithHttpInfo(id, apiVersion, organizationId, name, type, fileId, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Asset with file Provides an action to update an Asset with file, when Asset id and the new details of Asset are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> ApiVapiVersionAssetsIdUpdatePutAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string name, string type, Guid? fileId, System.IO.FileStream _file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ApiVapiVersionAssetsIdUpdatePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsIdUpdatePut");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Update";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            string textValue = null;
            string numberValue = null;
            string jsonValue = null;

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (type != null) localVarFormParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (textValue != null) localVarFormParams.Add("TextValue", null); // form parameter
            if (numberValue != null) localVarFormParams.Add("NumberValue", "0"); // form parameter
            if (jsonValue != null) localVarFormParams.Add("JsonValue", null); // form parameter
            if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (_file != null) localVarFileParams.Add(_file.Name, this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFileAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<Asset>(localVarResponse.Content));
        }

        /// <summary>
        /// Create a new Asset entity 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>GlobalAssetViewModel</returns>
        public GlobalAssetViewModel ApiVapiVersionAssetsPost (string apiVersion)
        {
             ApiResponse<GlobalAssetViewModel> localVarResponse = ApiVapiVersionAssetsPostWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Asset entity 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of GlobalAssetViewModel</returns>
        public ApiResponse< GlobalAssetViewModel > ApiVapiVersionAssetsPostWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsPost");

            var localVarPath = "/api/v{apiVersion}/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (type != null) localVarFormParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            //if (textValue != null) localVarFormParams.Add("TextValue", this.Configuration.ApiClient.ParameterToString(textValue)); // form parameter
            //if (numberValue != null) localVarFormParams.Add("NumberValue", this.Configuration.ApiClient.ParameterToString(numberValue)); // form parameter
            //if (jsonValue != null) localVarFormParams.Add("JsonValue", this.Configuration.ApiClient.ParameterToString(jsonValue)); // form parameter
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (sizeInBytes != null) localVarFormParams.Add("SizeInBytes", this.Configuration.ApiClient.ParameterToString(sizeInBytes)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalAssetViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlobalAssetViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalAssetViewModel)));
        }

        /// <summary>
        /// Create a new Asset entity 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of GlobalAssetViewModel</returns>
        public async System.Threading.Tasks.Task<GlobalAssetViewModel> ApiVapiVersionAssetsPostAsync (string apiVersion)
        {
             ApiResponse<GlobalAssetViewModel> localVarResponse = await ApiVapiVersionAssetsPostAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Asset entity 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (GlobalAssetViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlobalAssetViewModel>> ApiVapiVersionAssetsPostAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsPost");

            var localVarPath = "/api/v{apiVersion}/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (type != null) localVarFormParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            //if (textValue != null) localVarFormParams.Add("TextValue", this.Configuration.ApiClient.ParameterToString(textValue)); // form parameter
            //if (numberValue != null) localVarFormParams.Add("NumberValue", this.Configuration.ApiClient.ParameterToString(numberValue)); // form parameter
            //if (jsonValue != null) localVarFormParams.Add("JsonValue", this.Configuration.ApiClient.ParameterToString(jsonValue)); // form parameter
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (sizeInBytes != null) localVarFormParams.Add("SizeInBytes", this.Configuration.ApiClient.ParameterToString(sizeInBytes)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalAssetViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlobalAssetViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalAssetViewModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>AssetViewModelPaginatedList</returns>
        public AssetViewModelPaginatedList ApiVapiVersionAssetsViewAssetIdGet (string assetId, string apiVersion)
        {
             ApiResponse<AssetViewModelPaginatedList> localVarResponse = ApiVapiVersionAssetsViewAssetIdGetWithHttpInfo(assetId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AssetViewModelPaginatedList</returns>
        public ApiResponse< AssetViewModelPaginatedList > ApiVapiVersionAssetsViewAssetIdGetWithHttpInfo (string assetId, string apiVersion)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->ApiVapiVersionAssetsViewAssetIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsViewAssetIdGet");

            var localVarPath = "/api/v{apiVersion}/Assets/view/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsViewAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetViewModelPaginatedList)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AssetViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewAssetIdGetAsync (string assetId, string apiVersion)
        {
             ApiResponse<AssetViewModelPaginatedList> localVarResponse = await ApiVapiVersionAssetsViewAssetIdGetAsyncWithHttpInfo(assetId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AssetViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetViewModelPaginatedList>> ApiVapiVersionAssetsViewAssetIdGetAsyncWithHttpInfo (string assetId, string apiVersion)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->ApiVapiVersionAssetsViewAssetIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsViewAssetIdGet");

            var localVarPath = "/api/v{apiVersion}/Assets/view/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsViewAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AssetViewModelPaginatedList</returns>
        public AssetViewModelPaginatedList ApiVapiVersionAssetsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AssetViewModelPaginatedList> localVarResponse = ApiVapiVersionAssetsViewGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AssetViewModelPaginatedList</returns>
        public ApiResponse< AssetViewModelPaginatedList > ApiVapiVersionAssetsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsViewGet");

            var localVarPath = "/api/v{apiVersion}/Assets/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AssetViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AssetViewModelPaginatedList> ApiVapiVersionAssetsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AssetViewModelPaginatedList> localVarResponse = await ApiVapiVersionAssetsViewGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a view model list of all Assets and corresponding Agents and Files 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AssetViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetViewModelPaginatedList>> ApiVapiVersionAssetsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ApiVapiVersionAssetsViewGet");

            var localVarPath = "/api/v{apiVersion}/Assets/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAssetsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetViewModelPaginatedList)));
        }

        /// <summary>
        /// Export/download an Asset file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        public System.IO.MemoryStream ExportAsset (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = ExportAssetWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export/download an Asset file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        public ApiResponse< System.IO.MemoryStream > ExportAssetWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ExportAsset");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ExportAsset");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.MemoryStream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.MemoryStream)));
        }

        /// <summary>
        /// Export/download an Asset file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        public async System.Threading.Tasks.Task<System.IO.MemoryStream> ExportAssetAsync (string id, string apiVersion, string organizationId, string driveName = null)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = await ExportAssetAsyncWithHttpInfo(id, apiVersion, organizationId, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export/download an Asset file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportAssetAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->ExportAsset");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->ExportAsset");

            var localVarPath = string.Empty;
            if (string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Assets/{id}/Export";
            else localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Assets/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            byte[] byteArray = localVarResponse.RawBytes;
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            stream.Write(byteArray, 0, byteArray.Length);

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                stream);
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Asset</returns>
        public Asset GetAsset (string id, string apiVersion)
        {
             ApiResponse<Asset> localVarResponse = GetAssetWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse< Asset > GetAssetWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->GetAsset");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->GetAsset");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetAsync (string id, string apiVersion)
        {
             ApiResponse<Asset> localVarResponse = await GetAssetAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an Asset&#x27;s details for a particular Asset id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Asset id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->GetAsset");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AssetsApi->GetAsset");

            var localVarPath = "/api/v{apiVersion}/Assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

    }
}
