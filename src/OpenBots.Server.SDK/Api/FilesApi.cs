/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using Newtonsoft.Json;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets count of server folders in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionFilesCountFolderGet (string apiVersion, string driveName = null, string filter = null);

        /// <summary>
        /// Gets count of server folders in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionFilesCountFolderGetWithHttpInfo (string apiVersion, string driveName = null, string filter = null);
        /// <summary>
        /// Gets count of server files in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionFilesCountGet (string apiVersion, string driveName = null, string filter = null);

        /// <summary>
        /// Gets count of server files in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionFilesCountGetWithHttpInfo (string apiVersion, string driveName = null, string filter = null);
        /// <summary>
        /// Creates new server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ServerDrive</returns>
        ServerDrive ApiVapiVersionFilesDrivePost (string apiVersion, string driveName = null);

        /// <summary>
        /// Creates new server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of ServerDrive</returns>
        ApiResponse<ServerDrive> ApiVapiVersionFilesDrivePostWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides a list of all files/folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>FileFolderViewModelPaginatedList</returns>
        FileFolderViewModelPaginatedList ApiVapiVersionFilesGet (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all files/folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of FileFolderViewModelPaginatedList</returns>
        ApiResponse<FileFolderViewModelPaginatedList> ApiVapiVersionFilesGetWithHttpInfo (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Copies a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionFilesIdCopyParentIdPost (string id, string parentId, string apiVersion, string driveName = null);

        /// <summary>
        /// Copies a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionFilesIdCopyParentIdPostWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null);
        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionFilesIdDelete (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionFilesIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Export/Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>MemoryStream</returns>
        MemoryStream ApiVapiVersionFilesIdDownloadGet (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Export/Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of MemoryStream</returns>
        ApiResponse<MemoryStream> ApiVapiVersionFilesIdDownloadGetWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Moves a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionFilesIdMoveParentIdPut (string id, string parentId, string apiVersion, string driveName = null);

        /// <summary>
        /// Moves a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionFilesIdMoveParentIdPutWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null);
        /// <summary>
        /// Renames a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to rename a folder or file, when the id and the new name are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionFilesIdRenamePut (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null);

        /// <summary>
        /// Renames a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to rename a folder or file, when the id and the new name are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionFilesIdRenamePutWithHttpInfo (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null);
        /// <summary>
        /// Uploads new file/folder in server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>FileFolderViewModel</returns>
        FileFolderViewModel ApiVapiVersionFilesPost (string apiVersion, string driveName = null);

        /// <summary>
        /// Uploads new file/folder in server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of FileFolderViewModel</returns>
        ApiResponse<FileFolderViewModel> ApiVapiVersionFilesPostWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides server drive details for local storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ServerDrive</returns>
        ServerDrive GetDrive (string apiVersion, string driveName = null);

        /// <summary>
        /// Provides server drive details for local storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of ServerDrive</returns>
        ApiResponse<ServerDrive> GetDriveWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides server drive names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult GetDriveNames (string apiVersion, string adapterType = null);

        /// <summary>
        /// Provides server drive names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> GetDriveNamesWithHttpInfo (string apiVersion, string adapterType = null);
        /// <summary>
        /// Provides file/folder details for a particular file/folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>FileFolderViewModel</returns>
        FileFolderViewModel GetFileFolder (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Provides file/folder details for a particular file/folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of FileFolderViewModel</returns>
        ApiResponse<FileFolderViewModel> GetFileFolderWithHttpInfo (string id, string apiVersion, string driveName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets count of server folders in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionFilesCountFolderGetAsync (string apiVersion, string driveName = null, string filter = null);

        /// <summary>
        /// Gets count of server folders in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionFilesCountFolderGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string filter = null);
        /// <summary>
        /// Gets count of server files in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionFilesCountGetAsync (string apiVersion, string driveName = null, string filter = null);

        /// <summary>
        /// Gets count of server files in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionFilesCountGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string filter = null);
        /// <summary>
        /// Creates new server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ServerDrive</returns>
        System.Threading.Tasks.Task<ServerDrive> ApiVapiVersionFilesDrivePostAsync (string apiVersion, string driveName = null);

        /// <summary>
        /// Creates new server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (ServerDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerDrive>> ApiVapiVersionFilesDrivePostAsyncWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides a list of all files/folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of FileFolderViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<FileFolderViewModelPaginatedList> ApiVapiVersionFilesGetAsync (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all files/folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileFolderViewModelPaginatedList>> ApiVapiVersionFilesGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Copies a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdCopyParentIdPostAsync (string id, string parentId, string apiVersion, string driveName = null);

        /// <summary>
        /// Copies a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdCopyParentIdPostAsyncWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null);
        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdDeleteAsync (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Export/Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of MemoryStream</returns>
        System.Threading.Tasks.Task<MemoryStream> ApiVapiVersionFilesIdDownloadGetAsync (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Export/Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (MemoryStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryStream>> ApiVapiVersionFilesIdDownloadGetAsyncWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Moves a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdMoveParentIdPutAsync (string id, string parentId, string apiVersion, string driveName = null);

        /// <summary>
        /// Moves a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdMoveParentIdPutAsyncWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null);
        /// <summary>
        /// Renames a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to rename a folder or file, when the id and the new name are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdRenamePutAsync (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null);

        /// <summary>
        /// Renames a folder or file
        /// </summary>
        /// <remarks>
        /// Provides an action to rename a folder or file, when the id and the new name are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdRenamePutAsyncWithHttpInfo (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null);
        /// <summary>
        /// Uploads new file/folder in server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of FileFolderViewModel</returns>
        System.Threading.Tasks.Task<FileFolderViewModel> ApiVapiVersionFilesPostAsync (string apiVersion, string driveName = null);

        /// <summary>
        /// Uploads new file/folder in server drive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileFolderViewModel>> ApiVapiVersionFilesPostAsyncWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides server drive details for local storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ServerDrive</returns>
        System.Threading.Tasks.Task<ServerDrive> GetDriveAsync (string apiVersion, string driveName = null);

        /// <summary>
        /// Provides server drive details for local storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (ServerDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerDrive>> GetDriveAsyncWithHttpInfo (string apiVersion, string driveName = null);
        /// <summary>
        /// Provides server drive names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> GetDriveNamesAsync (string apiVersion, string adapterType = null);

        /// <summary>
        /// Provides server drive names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> GetDriveNamesAsyncWithHttpInfo (string apiVersion, string adapterType = null);
        /// <summary>
        /// Provides file/folder details for a particular file/folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of FileFolderViewModel</returns>
        System.Threading.Tasks.Task<FileFolderViewModel> GetFileFolderAsync (string id, string apiVersion, string organizationId, string driveId);

        /// <summary>
        /// Provides file/folder details for a particular file/folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileFolderViewModel>> GetFileFolderAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string driveId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FilesApi : IFilesApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FilesApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets count of server folders in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionFilesCountFolderGet (string apiVersion, string driveName = null, string filter = null)
        {
             ApiVapiVersionFilesCountFolderGetWithHttpInfo(apiVersion, driveName, filter);
        }

        /// <summary>
        /// Gets count of server folders in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionFilesCountFolderGetWithHttpInfo (string apiVersion, string driveName = null, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesCountFolderGet");

            var localVarPath = "/api/v{apiVersion}/Files/count/folder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesCountFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of server folders in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionFilesCountFolderGetAsync (string apiVersion, string driveName = null, string filter = null)
        {
             await ApiVapiVersionFilesCountFolderGetAsyncWithHttpInfo(apiVersion, driveName, filter);

        }

        /// <summary>
        /// Gets count of server folders in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionFilesCountFolderGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesCountFolderGet");

            var localVarPath = "/api/v{apiVersion}/Files/count/folder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesCountFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of server files in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionFilesCountGet (string apiVersion, string driveName = null, string filter = null)
        {
             ApiVapiVersionFilesCountGetWithHttpInfo(apiVersion, driveName, filter);
        }

        /// <summary>
        /// Gets count of server files in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionFilesCountGetWithHttpInfo (string apiVersion, string driveName = null, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesCountGet");

            var localVarPath = "/api/v{apiVersion}/Files/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of server files in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionFilesCountGetAsync (string apiVersion, string driveName = null, string filter = null)
        {
             await ApiVapiVersionFilesCountGetAsyncWithHttpInfo(apiVersion, driveName, filter);

        }

        /// <summary>
        /// Gets count of server files in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionFilesCountGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesCountGet");

            var localVarPath = "/api/v{apiVersion}/Files/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates new server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ServerDrive</returns>
        public ServerDrive ApiVapiVersionFilesDrivePost (string apiVersion, string driveName = null)
        {
             ApiResponse<ServerDrive> localVarResponse = ApiVapiVersionFilesDrivePostWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of ServerDrive</returns>
        public ApiResponse< ServerDrive > ApiVapiVersionFilesDrivePostWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesDrivePost");

            var localVarPath = "/api/v{apiVersion}/Files/drive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesDrivePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerDrive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerDrive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerDrive)));
        }

        /// <summary>
        /// Creates new server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ServerDrive</returns>
        public async System.Threading.Tasks.Task<ServerDrive> ApiVapiVersionFilesDrivePostAsync (string apiVersion, string driveName = null)
        {
             ApiResponse<ServerDrive> localVarResponse = await ApiVapiVersionFilesDrivePostAsyncWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (ServerDrive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServerDrive>> ApiVapiVersionFilesDrivePostAsyncWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesDrivePost");

            var localVarPath = "/api/v{apiVersion}/Files/drive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesDrivePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerDrive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerDrive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerDrive)));
        }

        /// <summary>
        /// Provides a list of all files/folders 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>FileFolderViewModelPaginatedList</returns>
        public FileFolderViewModelPaginatedList ApiVapiVersionFilesGet (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<FileFolderViewModelPaginatedList> localVarResponse = ApiVapiVersionFilesGetWithHttpInfo(apiVersion, driveName, _file, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all files/folders 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of FileFolderViewModelPaginatedList</returns>
        public ApiResponse< FileFolderViewModelPaginatedList > ApiVapiVersionFilesGetWithHttpInfo (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesGet");

            var localVarPath = "/api/v{apiVersion}/Files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (_file != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file", _file)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileFolderViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileFolderViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileFolderViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all files/folders 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of FileFolderViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<FileFolderViewModelPaginatedList> ApiVapiVersionFilesGetAsync (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<FileFolderViewModelPaginatedList> localVarResponse = await ApiVapiVersionFilesGetAsyncWithHttpInfo(apiVersion, driveName, _file, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all files/folders 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <param name="_file">Determines whether to retrieve all files (true), folders (false), or both (null/empty) (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileFolderViewModelPaginatedList>> ApiVapiVersionFilesGetAsyncWithHttpInfo (string apiVersion, string driveName = null, string _file = null, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesGet");

            var localVarPath = "/api/v{apiVersion}/Files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (_file != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file", _file)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileFolderViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileFolderViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileFolderViewModelPaginatedList)));
        }

        /// <summary>
        /// Copies a folder or file Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionFilesIdCopyParentIdPost (string id, string parentId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionFilesIdCopyParentIdPostWithHttpInfo(id, parentId, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies a folder or file Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionFilesIdCopyParentIdPostWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/copy/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdCopyParentIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Copies a folder or file Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdCopyParentIdPostAsync (string id, string parentId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionFilesIdCopyParentIdPostAsyncWithHttpInfo(id, parentId, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies a folder or file Provides an action to copy a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be copied to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdCopyParentIdPostAsyncWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdCopyParentIdPost");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/copy/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdCopyParentIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionFilesIdDelete (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionFilesIdDeleteWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionFilesIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdDelete");

            var localVarPath = "/api/v{apiVersion}/Files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdDeleteAsync (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionFilesIdDeleteAsyncWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a file or empty folder with a specified id from the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or empty folder id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdDelete");

            var localVarPath = "/api/v{apiVersion}/Files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Export/Download a file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>MemoryStream</returns>
        public MemoryStream ApiVapiVersionFilesIdDownloadGet (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<MemoryStream> localVarResponse = ApiVapiVersionFilesIdDownloadGetWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export/Download a file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of MemoryStream</returns>
        public ApiResponse< MemoryStream > ApiVapiVersionFilesIdDownloadGetWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdDownloadGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdDownloadGet");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemoryStream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemoryStream)));
        }

        /// <summary>
        /// Export/Download a file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of MemoryStream</returns>
        public async System.Threading.Tasks.Task<MemoryStream> ApiVapiVersionFilesIdDownloadGetAsync (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<MemoryStream> localVarResponse = await ApiVapiVersionFilesIdDownloadGetAsyncWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export/Download a file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (MemoryStream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MemoryStream>> ApiVapiVersionFilesIdDownloadGetAsyncWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdDownloadGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdDownloadGet");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MemoryStream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MemoryStream)));
        }

        /// <summary>
        /// Moves a folder or file Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionFilesIdMoveParentIdPut (string id, string parentId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionFilesIdMoveParentIdPutWithHttpInfo(id, parentId, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moves a folder or file Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionFilesIdMoveParentIdPutWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/move/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdMoveParentIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Moves a folder or file Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdMoveParentIdPutAsync (string id, string parentId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionFilesIdMoveParentIdPutAsyncWithHttpInfo(id, parentId, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moves a folder or file Provides an action to move a folder or file, when the id and the parent folder id are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="parentId">Parent folder id to be moved to</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdMoveParentIdPutAsyncWithHttpInfo (string id, string parentId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdMoveParentIdPut");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/move/{parentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarPathParams.Add("parentId", this.Configuration.ApiClient.ParameterToString(parentId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdMoveParentIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Renames a folder or file Provides an action to rename a folder or file, when the id and the new name are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionFilesIdRenamePut (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionFilesIdRenamePutWithHttpInfo(id, apiVersion, body, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renames a folder or file Provides an action to rename a folder or file, when the id and the new name are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionFilesIdRenamePutWithHttpInfo (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdRenamePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdRenamePut");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdRenamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Renames a folder or file Provides an action to rename a folder or file, when the id and the new name are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionFilesIdRenamePutAsync (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionFilesIdRenamePutAsyncWithHttpInfo(id, apiVersion, body, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renames a folder or file Provides an action to rename a folder or file, when the id and the new name are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Folder or file id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Name to be updated (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionFilesIdRenamePutAsyncWithHttpInfo (string id, string apiVersion, FileFolderViewModel body = null, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->ApiVapiVersionFilesIdRenamePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesIdRenamePut");

            var localVarPath = "/api/v{apiVersion}/Files/{id}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesIdRenamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Uploads new file/folder in server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>FileFolderViewModel</returns>
        public FileFolderViewModel ApiVapiVersionFilesPost (string apiVersion, string driveName = null)
        {
             ApiResponse<FileFolderViewModel> localVarResponse = ApiVapiVersionFilesPostWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads new file/folder in server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of FileFolderViewModel</returns>
        public ApiResponse< FileFolderViewModel > ApiVapiVersionFilesPostWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesPost");

            var localVarPath = "/api/v{apiVersion}/Files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (size != null) localVarFormParams.Add("Size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            //if (storagePath != null) localVarFormParams.Add("StoragePath", this.Configuration.ApiClient.ParameterToString(storagePath)); // form parameter
            //if (fullStoragePath != null) localVarFormParams.Add("FullStoragePath", this.Configuration.ApiClient.ParameterToString(fullStoragePath)); // form parameter
            //if (hasChild != null) localVarFormParams.Add("HasChild", this.Configuration.ApiClient.ParameterToString(hasChild)); // form parameter
            //if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (isFile != null) localVarFormParams.Add("IsFile", this.Configuration.ApiClient.ParameterToString(isFile)); // form parameter
            //if (parentId != null) localVarFormParams.Add("ParentId", this.Configuration.ApiClient.ParameterToString(parentId)); // form parameter
            //if (storageDriveId != null) localVarFormParams.Add("StorageDriveId", this.Configuration.ApiClient.ParameterToString(storageDriveId)); // form parameter
            //if (contentHandle != null) localVarFormParams.Add("Content.Handle", this.Configuration.ApiClient.ParameterToString(contentHandle)); // form parameter
            //if (contentCanRead != null) localVarFormParams.Add("Content.CanRead", this.Configuration.ApiClient.ParameterToString(contentCanRead)); // form parameter
            //if (contentCanWrite != null) localVarFormParams.Add("Content.CanWrite", this.Configuration.ApiClient.ParameterToString(contentCanWrite)); // form parameter
            //if (contentSafeFileHandleIsInvalid != null) localVarFormParams.Add("Content.SafeFileHandle.IsInvalid", this.Configuration.ApiClient.ParameterToString(contentSafeFileHandleIsInvalid)); // form parameter
            //if (contentSafeFileHandleIsClosed != null) localVarFormParams.Add("Content.SafeFileHandle.IsClosed", this.Configuration.ApiClient.ParameterToString(contentSafeFileHandleIsClosed)); // form parameter
            //if (contentName != null) localVarFormParams.Add("Content.Name", this.Configuration.ApiClient.ParameterToString(contentName)); // form parameter
            //if (contentIsAsync != null) localVarFormParams.Add("Content.IsAsync", this.Configuration.ApiClient.ParameterToString(contentIsAsync)); // form parameter
            //if (contentLength != null) localVarFormParams.Add("Content.Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // form parameter
            //if (contentPosition != null) localVarFormParams.Add("Content.Position", this.Configuration.ApiClient.ParameterToString(contentPosition)); // form parameter
            //if (contentCanSeek != null) localVarFormParams.Add("Content.CanSeek", this.Configuration.ApiClient.ParameterToString(contentCanSeek)); // form parameter
            //if (contentCanTimeout != null) localVarFormParams.Add("Content.CanTimeout", this.Configuration.ApiClient.ParameterToString(contentCanTimeout)); // form parameter
            //if (contentReadTimeout != null) localVarFormParams.Add("Content.ReadTimeout", this.Configuration.ApiClient.ParameterToString(contentReadTimeout)); // form parameter
            //if (contentWriteTimeout != null) localVarFormParams.Add("Content.WriteTimeout", this.Configuration.ApiClient.ParameterToString(contentWriteTimeout)); // form parameter
            //if (files != null) localVarFormParams.Add("Files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            //if (hash != null) localVarFormParams.Add("Hash", this.Configuration.ApiClient.ParameterToString(hash)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileFolderViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileFolderViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileFolderViewModel)));
        }

        /// <summary>
        /// Uploads new file/folder in server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of FileFolderViewModel</returns>
        public async System.Threading.Tasks.Task<FileFolderViewModel> ApiVapiVersionFilesPostAsync (string apiVersion, string driveName = null)
        {
             ApiResponse<FileFolderViewModel> localVarResponse = await ApiVapiVersionFilesPostAsyncWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads new file/folder in server drive 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileFolderViewModel>> ApiVapiVersionFilesPostAsyncWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->ApiVapiVersionFilesPost");

            var localVarPath = "/api/v{apiVersion}/Files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (size != null) localVarFormParams.Add("Size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            //if (storagePath != null) localVarFormParams.Add("StoragePath", this.Configuration.ApiClient.ParameterToString(storagePath)); // form parameter
            //if (fullStoragePath != null) localVarFormParams.Add("FullStoragePath", this.Configuration.ApiClient.ParameterToString(fullStoragePath)); // form parameter
            //if (hasChild != null) localVarFormParams.Add("HasChild", this.Configuration.ApiClient.ParameterToString(hasChild)); // form parameter
            //if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (isFile != null) localVarFormParams.Add("IsFile", this.Configuration.ApiClient.ParameterToString(isFile)); // form parameter
            //if (parentId != null) localVarFormParams.Add("ParentId", this.Configuration.ApiClient.ParameterToString(parentId)); // form parameter
            //if (storageDriveId != null) localVarFormParams.Add("StorageDriveId", this.Configuration.ApiClient.ParameterToString(storageDriveId)); // form parameter
            //if (contentHandle != null) localVarFormParams.Add("Content.Handle", this.Configuration.ApiClient.ParameterToString(contentHandle)); // form parameter
            //if (contentCanRead != null) localVarFormParams.Add("Content.CanRead", this.Configuration.ApiClient.ParameterToString(contentCanRead)); // form parameter
            //if (contentCanWrite != null) localVarFormParams.Add("Content.CanWrite", this.Configuration.ApiClient.ParameterToString(contentCanWrite)); // form parameter
            //if (contentSafeFileHandleIsInvalid != null) localVarFormParams.Add("Content.SafeFileHandle.IsInvalid", this.Configuration.ApiClient.ParameterToString(contentSafeFileHandleIsInvalid)); // form parameter
            //if (contentSafeFileHandleIsClosed != null) localVarFormParams.Add("Content.SafeFileHandle.IsClosed", this.Configuration.ApiClient.ParameterToString(contentSafeFileHandleIsClosed)); // form parameter
            //if (contentName != null) localVarFormParams.Add("Content.Name", this.Configuration.ApiClient.ParameterToString(contentName)); // form parameter
            //if (contentIsAsync != null) localVarFormParams.Add("Content.IsAsync", this.Configuration.ApiClient.ParameterToString(contentIsAsync)); // form parameter
            //if (contentLength != null) localVarFormParams.Add("Content.Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // form parameter
            //if (contentPosition != null) localVarFormParams.Add("Content.Position", this.Configuration.ApiClient.ParameterToString(contentPosition)); // form parameter
            //if (contentCanSeek != null) localVarFormParams.Add("Content.CanSeek", this.Configuration.ApiClient.ParameterToString(contentCanSeek)); // form parameter
            //if (contentCanTimeout != null) localVarFormParams.Add("Content.CanTimeout", this.Configuration.ApiClient.ParameterToString(contentCanTimeout)); // form parameter
            //if (contentReadTimeout != null) localVarFormParams.Add("Content.ReadTimeout", this.Configuration.ApiClient.ParameterToString(contentReadTimeout)); // form parameter
            //if (contentWriteTimeout != null) localVarFormParams.Add("Content.WriteTimeout", this.Configuration.ApiClient.ParameterToString(contentWriteTimeout)); // form parameter
            //if (files != null) localVarFormParams.Add("Files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            //if (hash != null) localVarFormParams.Add("Hash", this.Configuration.ApiClient.ParameterToString(hash)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileFolderViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileFolderViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileFolderViewModel)));
        }

        /// <summary>
        /// Provides server drive details for local storage 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ServerDrive</returns>
        public ServerDrive GetDrive (string apiVersion, string driveName = null)
        {
             ApiResponse<ServerDrive> localVarResponse = GetDriveWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides server drive details for local storage 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of ServerDrive</returns>
        public ApiResponse< ServerDrive > GetDriveWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetDrive");

            var localVarPath = "/api/v{apiVersion}/Files/drive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerDrive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerDrive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerDrive)));
        }

        /// <summary>
        /// Provides server drive details for local storage 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ServerDrive</returns>
        public async System.Threading.Tasks.Task<ServerDrive> GetDriveAsync (string apiVersion, string driveName = null)
        {
             ApiResponse<ServerDrive> localVarResponse = await GetDriveAsyncWithHttpInfo(apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides server drive details for local storage 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (ServerDrive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServerDrive>> GetDriveAsyncWithHttpInfo (string apiVersion, string driveName = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetDrive");

            var localVarPath = "/api/v{apiVersion}/Files/drive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerDrive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerDrive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerDrive)));
        }

        /// <summary>
        /// Provides server drive names 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult GetDriveNames (string apiVersion, string adapterType = null)
        {
             ApiResponse<IActionResult> localVarResponse = GetDriveNamesWithHttpInfo(apiVersion, adapterType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides server drive names 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > GetDriveNamesWithHttpInfo (string apiVersion, string adapterType = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetDriveNames");

            var localVarPath = "/api/v{apiVersion}/Files/driveNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (adapterType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adapterType", adapterType)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDriveNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Provides server drive names 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> GetDriveNamesAsync (string apiVersion, string adapterType = null)
        {
             ApiResponse<IActionResult> localVarResponse = await GetDriveNamesAsyncWithHttpInfo(apiVersion, adapterType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides server drive names 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="adapterType"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> GetDriveNamesAsyncWithHttpInfo (string apiVersion, string adapterType = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetDriveNames");

            var localVarPath = "/api/v{apiVersion}/Files/driveNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (adapterType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adapterType", adapterType)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDriveNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Provides file/folder details for a particular file/folder 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>FileFolderViewModel</returns>
        public FileFolderViewModel GetFileFolder (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<FileFolderViewModel> localVarResponse = GetFileFolderWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides file/folder details for a particular file/folder 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of FileFolderViewModel</returns>
        public ApiResponse< FileFolderViewModel > GetFileFolderWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFileFolder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetFileFolder");

            var localVarPath = "/api/v{apiVersion}/Files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileFolderViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileFolderViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileFolderViewModel)));
        }

        /// <summary>
        /// Provides file/folder details for a particular file/folder 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of FileFolderViewModel</returns>
        public async System.Threading.Tasks.Task<FileFolderViewModel> GetFileFolderAsync (string id, string apiVersion, string organizationId, string driveId)
        {
             ApiResponse<FileFolderViewModel> localVarResponse = await GetFileFolderAsyncWithHttpInfo(id, apiVersion, organizationId, driveId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides file/folder details for a particular file/folder 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File or folder id</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (FileFolderViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileFolderViewModel>> GetFileFolderAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string driveId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFileFolder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling FilesApi->GetFileFolder");

            var localVarPath = "/api/v{apiVersion}/Storage/Drives/{driveId}/Files/{id}";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Storage/{organizationId}/Drives/{driveId}/Files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (driveId != null) localVarPathParams.Add("driveId", this.Configuration.ApiClient.ParameterToString(driveId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<PaginatedList<FileFolderViewModel>>(localVarResponse.Content).Items.FirstOrDefault();
            return new ApiResponse<FileFolderViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                response);
        }

    }
}
