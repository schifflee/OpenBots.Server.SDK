/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using OpenBots.DocumentsServer.SDK.Exceptions;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Exceptions;
using OpenBots.Server.SDK.Model;
using RestSharp;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDocumentProcessingEngineServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign the Task to another person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceAssigntoPost (AssignToRequest body = null);

        /// <summary>
        /// Assign the Task to another person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceAssigntoPostWithHttpInfo (AssignToRequest body = null);
        /// <summary>
        /// Change the status of a given HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns></returns>
        void ApiServicesAppDocumentprocessingengineserviceChangestatusPost (Guid? humanTaskId = null, string newStatus = null);

        /// <summary>
        /// Change the status of a given HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiServicesAppDocumentprocessingengineserviceChangestatusPostWithHttpInfo (Guid? humanTaskId = null, string newStatus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>List&lt;FormDetails&gt;</returns>
        List<FormDetails> ApiServicesAppDocumentprocessingengineserviceGetallformsGet (Guid? entityId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FormDetails&gt;</returns>
        ApiResponse<List<FormDetails>> ApiServicesAppDocumentprocessingengineserviceGetallformsGetWithHttpInfo (Guid? entityId = null);
        /// <summary>
        /// Retrieves Details of a specific Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>ExtractedDocumentView</returns>
        ExtractedDocumentView ApiServicesAppDocumentprocessingengineserviceGetdocumentGet (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Retrieves Details of a specific Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>ApiResponse of ExtractedDocumentView</returns>
        ApiResponse<ExtractedDocumentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>DocumentContentView</returns>
        DocumentContentView ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGet (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of DocumentContentView</returns>
        ApiResponse<DocumentContentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// List of Documents Extracted from the Documents Submitted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedDocumentView&gt;</returns>
        List<ExtractedDocumentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGet (Guid? humanTaskId = null);

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedDocumentView&gt;</returns>
        ApiResponse<List<ExtractedDocumentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Provides a JSON Schema for the Extracted Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGet (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGet (string schemaName = null);

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetWithHttpInfo (string schemaName = null);
        /// <summary>
        /// List of Files that were processed for a given task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedFile&gt;</returns>
        List<ExtractedFile> ApiServicesAppDocumentprocessingengineserviceGetfilesGet (Guid? humanTaskId = null);

        /// <summary>
        /// List of Files that were processed for a given task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedFile&gt;</returns>
        ApiResponse<List<ExtractedFile>> ApiServicesAppDocumentprocessingengineserviceGetfilesGetWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetpageimageGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);

        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetpageimageGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);
        /// <summary>
        /// Gets the Pages of a Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>List&lt;ExtractedDocumentPage&gt;</returns>
        List<ExtractedDocumentPage> ApiServicesAppDocumentprocessingengineserviceGetpagesGet (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Gets the Pages of a Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedDocumentPage&gt;</returns>
        ApiResponse<List<ExtractedDocumentPage>> ApiServicesAppDocumentprocessingengineserviceGetpagesGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetpagetextGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);

        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null);
        /// <summary>
        /// Gets a list of task queues defined in the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> ApiServicesAppDocumentprocessingengineserviceGetqueuesGet ();

        /// <summary>
        /// Gets a list of task queues defined in the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> ApiServicesAppDocumentprocessingengineserviceGetqueuesGetWithHttpInfo ();
        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedSession&gt;</returns>
        List<ExtractedSession> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGet (Guid? humanTaskId = null);

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedSession&gt;</returns>
        ApiResponse<List<ExtractedSession>> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Gets the current status of the HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>string</returns>
        string ApiServicesAppDocumentprocessingengineserviceGetstatusGet (string humanTaskId = null);

        /// <summary>
        /// Gets the current status of the HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo (string humanTaskId = null);

        DocumentStatus GetDocumentStatus(string humanTaskId = null);

        bool IsDocumentCompleted(string status);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>bool?</returns>
        bool? ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPost (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null);
        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>bool?</returns>
        bool? ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPost (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null);

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null);
        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGet (Guid? humanTaskId = null);

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPost (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostWithHttpInfo (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>SubmitDocumentResponse</returns>
        SubmitDocumentResponse ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPost (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of SubmitDocumentResponse</returns>
        ApiResponse<SubmitDocumentResponse> ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostWithHttpInfo (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null);

        DocumentResult SaveDocumentResults(Guid humanTaskId, bool awaitCompletion, bool savePageImages, bool savePageText, int timeout, string outputFolder, DataTable dataTable);

        Dictionary<string, string> SubmitDocument(string fileToProcess, string taskQueueName = "", string name = "", string description = "", string caseNumber = "", string caseType = "", string assignedTo = "", DateTime? dueOn = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        Guid? ApiServicesAppHumantasksCreateoreditPost(CreateOrEditHumanTaskDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> ApiServicesAppHumantasksCreateoreditPostWithHttpInfo(CreateOrEditHumanTaskDto body = null);

        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign the Task to another person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceAssigntoPostAsync (AssignToRequest body = null);

        /// <summary>
        /// Assign the Task to another person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceAssigntoPostAsyncWithHttpInfo (AssignToRequest body = null);
        /// <summary>
        /// Change the status of a given HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiServicesAppDocumentprocessingengineserviceChangestatusPostAsync (Guid? humanTaskId = null, string newStatus = null);

        /// <summary>
        /// Change the status of a given HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiServicesAppDocumentprocessingengineserviceChangestatusPostAsyncWithHttpInfo (Guid? humanTaskId = null, string newStatus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>Task of List&lt;FormDetails&gt;</returns>
        System.Threading.Tasks.Task<List<FormDetails>> ApiServicesAppDocumentprocessingengineserviceGetallformsGetAsync (Guid? entityId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FormDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FormDetails>>> ApiServicesAppDocumentprocessingengineserviceGetallformsGetAsyncWithHttpInfo (Guid? entityId = null);
        /// <summary>
        /// Retrieves Details of a specific Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>Task of ExtractedDocumentView</returns>
        System.Threading.Tasks.Task<ExtractedDocumentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentGetAsync (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Retrieves Details of a specific Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>Task of ApiResponse (ExtractedDocumentView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractedDocumentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of DocumentContentView</returns>
        System.Threading.Tasks.Task<DocumentContentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetAsync (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentContentView)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentContentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// List of Documents Extracted from the Documents Submitted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedDocumentView&gt;</returns>
        System.Threading.Tasks.Task<List<ExtractedDocumentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetAsync (Guid? humanTaskId = null);

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedDocumentView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExtractedDocumentView>>> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetAsyncWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Provides a JSON Schema for the Extracted Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetAsync (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetAsync (string schemaName = null);

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetAsyncWithHttpInfo (string schemaName = null);
        /// <summary>
        /// List of Files that were processed for a given task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedFile&gt;</returns>
        System.Threading.Tasks.Task<List<ExtractedFile>> ApiServicesAppDocumentprocessingengineserviceGetfilesGetAsync (Guid? humanTaskId = null);

        /// <summary>
        /// List of Files that were processed for a given task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExtractedFile>>> ApiServicesAppDocumentprocessingengineserviceGetfilesGetAsyncWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpageimageGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);

        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpageimageGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);
        /// <summary>
        /// Gets the Pages of a Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedDocumentPage&gt;</returns>
        System.Threading.Tasks.Task<List<ExtractedDocumentPage>> ApiServicesAppDocumentprocessingengineserviceGetpagesGetAsync (Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Gets the Pages of a Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedDocumentPage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExtractedDocumentPage>>> ApiServicesAppDocumentprocessingengineserviceGetpagesGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);

        /// <summary>
        /// Gets an Image for a page extracted from the processed file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpagetextGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null);
        /// <summary>
        /// Gets a list of task queues defined in the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> ApiServicesAppDocumentprocessingengineserviceGetqueuesGetAsync ();

        /// <summary>
        /// Gets a list of task queues defined in the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> ApiServicesAppDocumentprocessingengineserviceGetqueuesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedSession&gt;</returns>
        System.Threading.Tasks.Task<List<ExtractedSession>> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetAsync (Guid? humanTaskId = null);

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExtractedSession>>> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetAsyncWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Gets the current status of the HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetstatusGetAsync (string humanTaskId = null);

        /// <summary>
        /// Gets the current status of the HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetstatusGetAsyncWithHttpInfo (string humanTaskId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostAsync (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null);
        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostAsync (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null);

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null);
        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetAsync (Guid? humanTaskId = null);

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetAsyncWithHttpInfo (Guid? humanTaskId = null);
        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostAsync (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null);

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostAsyncWithHttpInfo (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of SubmitDocumentResponse</returns>
        System.Threading.Tasks.Task<SubmitDocumentResponse> ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostAsync (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (SubmitDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitDocumentResponse>> ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostAsyncWithHttpInfo (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> ApiServicesAppHumantasksCreateoreditPostAsync(CreateOrEditHumanTaskDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiServicesAppHumantasksCreateoreditPostAsyncWithHttpInfo(CreateOrEditHumanTaskDto body = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DocumentProcessingEngineServiceApi : IDocumentProcessingEngineServiceApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentProcessingEngineServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentProcessingEngineServiceApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentProcessingEngineServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentProcessingEngineServiceApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentProcessingEngineServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentProcessingEngineServiceApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign the Task to another person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceAssigntoPost (AssignToRequest body = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceAssigntoPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign the Task to another person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceAssigntoPostWithHttpInfo (AssignToRequest body = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/AssignTo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceAssigntoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Assign the Task to another person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceAssigntoPostAsync (AssignToRequest body = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceAssigntoPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign the Task to another person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceAssigntoPostAsyncWithHttpInfo (AssignToRequest body = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/AssignTo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceAssigntoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change the status of a given HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns></returns>
        public void ApiServicesAppDocumentprocessingengineserviceChangestatusPost (Guid? humanTaskId = null, string newStatus = null)
        {
             ApiServicesAppDocumentprocessingengineserviceChangestatusPostWithHttpInfo(humanTaskId, newStatus);
        }

        /// <summary>
        /// Change the status of a given HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiServicesAppDocumentprocessingengineserviceChangestatusPostWithHttpInfo (Guid? humanTaskId = null, string newStatus = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/ChangeStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (newStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newStatus", newStatus)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the status of a given HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiServicesAppDocumentprocessingengineserviceChangestatusPostAsync (Guid? humanTaskId = null, string newStatus = null)
        {
             await ApiServicesAppDocumentprocessingengineserviceChangestatusPostAsyncWithHttpInfo(humanTaskId, newStatus);

        }

        /// <summary>
        /// Change the status of a given HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (guid) of the task (optional)</param>
        /// <param name="newStatus">New status to change to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiServicesAppDocumentprocessingengineserviceChangestatusPostAsyncWithHttpInfo (Guid? humanTaskId = null, string newStatus = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/ChangeStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (newStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newStatus", newStatus)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceChangestatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>List&lt;FormDetails&gt;</returns>
        public List<FormDetails> ApiServicesAppDocumentprocessingengineserviceGetallformsGet (Guid? entityId = null)
        {
             ApiResponse<List<FormDetails>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetallformsGetWithHttpInfo(entityId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FormDetails&gt;</returns>
        public ApiResponse< List<FormDetails> > ApiServicesAppDocumentprocessingengineserviceGetallformsGetWithHttpInfo (Guid? entityId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetAllForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetallformsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FormDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FormDetails>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FormDetails>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>Task of List&lt;FormDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<FormDetails>> ApiServicesAppDocumentprocessingengineserviceGetallformsGetAsync (Guid? entityId = null)
        {
             ApiResponse<List<FormDetails>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetallformsGetAsyncWithHttpInfo(entityId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FormDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FormDetails>>> ApiServicesAppDocumentprocessingengineserviceGetallformsGetAsyncWithHttpInfo (Guid? entityId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetAllForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetallformsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FormDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FormDetails>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FormDetails>)));
        }

        /// <summary>
        /// Retrieves Details of a specific Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>ExtractedDocumentView</returns>
        public ExtractedDocumentView ApiServicesAppDocumentprocessingengineserviceGetdocumentGet (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<ExtractedDocumentView> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetdocumentGetWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Details of a specific Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>ApiResponse of ExtractedDocumentView</returns>
        public ApiResponse< ExtractedDocumentView > ApiServicesAppDocumentprocessingengineserviceGetdocumentGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractedDocumentView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtractedDocumentView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractedDocumentView)));
        }

        /// <summary>
        /// Retrieves Details of a specific Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>Task of ExtractedDocumentView</returns>
        public async System.Threading.Tasks.Task<ExtractedDocumentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentGetAsync (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<ExtractedDocumentView> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetdocumentGetAsyncWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves Details of a specific Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID (optional)</param>
        /// <returns>Task of ApiResponse (ExtractedDocumentView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtractedDocumentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractedDocumentView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtractedDocumentView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractedDocumentView)));
        }

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>DocumentContentView</returns>
        public DocumentContentView ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGet (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<DocumentContentView> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of DocumentContentView</returns>
        public ApiResponse< DocumentContentView > ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentData", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetDocumentDataResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<DocumentContentView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of DocumentContentView</returns>
        public async System.Threading.Tasks.Task<DocumentContentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetAsync (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<DocumentContentView> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetAsyncWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentContentView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentContentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentContentView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentContentView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentContentView)));
        }

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedDocumentView&gt;</returns>
        public List<ExtractedDocumentView> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGet (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedDocumentView>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetWithHttpInfo(humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedDocumentView&gt;</returns>
        public ApiResponse< List<ExtractedDocumentView> > ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetDocumentsResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<List<ExtractedDocumentView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedDocumentView&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExtractedDocumentView>> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetAsync (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedDocumentView>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetAsyncWithHttpInfo(humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Documents Extracted from the Documents Submitted. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedDocumentView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExtractedDocumentView>>> ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetAsyncWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedDocumentView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedDocumentView>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedDocumentView>)));
        }

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGet (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetAsync (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetAsyncWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a JSON Schema for the Extracted Data 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentschemaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGet (string schemaName = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetWithHttpInfo(schemaName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetWithHttpInfo (string schemaName = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentSchemaByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetAsync (string schemaName = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetAsyncWithHttpInfo(schemaName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the JSON Schema as a string for any document by Name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Valid schema name. This should be in document.Schema property (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGetAsyncWithHttpInfo (string schemaName = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetDocumentSchemaByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetdocumentschemabynameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List of Files that were processed for a given task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedFile&gt;</returns>
        public List<ExtractedFile> ApiServicesAppDocumentprocessingengineserviceGetfilesGet (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedFile>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetfilesGetWithHttpInfo(humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Files that were processed for a given task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedFile&gt;</returns>
        public ApiResponse< List<ExtractedFile> > ApiServicesAppDocumentprocessingengineserviceGetfilesGetWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedFile>)));
        }

        /// <summary>
        /// List of Files that were processed for a given task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExtractedFile>> ApiServicesAppDocumentprocessingengineserviceGetfilesGetAsync (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedFile>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetfilesGetAsyncWithHttpInfo(humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Files that were processed for a given task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExtractedFile>>> ApiServicesAppDocumentprocessingengineserviceGetfilesGetAsyncWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedFile>)));
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetpageimageGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetpageimageGetWithHttpInfo(humanTaskId, documentId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetpageimageGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetStringResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpageimageGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetpageimageGetAsyncWithHttpInfo(humanTaskId, documentId, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpageimageGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpageimageGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the Pages of a Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>List&lt;ExtractedDocumentPage&gt;</returns>
        public List<ExtractedDocumentPage> ApiServicesAppDocumentprocessingengineserviceGetpagesGet (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<List<ExtractedDocumentPage>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetpagesGetWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Pages of a Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedDocumentPage&gt;</returns>
        public ApiResponse< List<ExtractedDocumentPage> > ApiServicesAppDocumentprocessingengineserviceGetpagesGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedDocumentPage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedDocumentPage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedDocumentPage>)));
        }

        /// <summary>
        /// Gets the Pages of a Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedDocumentPage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExtractedDocumentPage>> ApiServicesAppDocumentprocessingengineserviceGetpagesGetAsync (Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<List<ExtractedDocumentPage>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetpagesGetAsyncWithHttpInfo(humanTaskId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Pages of a Document 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedDocumentPage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExtractedDocumentPage>>> ApiServicesAppDocumentprocessingengineserviceGetpagesGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedDocumentPage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedDocumentPage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedDocumentPage>)));
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetpagetextGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetpagetextGetWithHttpInfo(humanTaskId, documentId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetpagetextGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageText", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetStringResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetpagetextGetAsyncWithHttpInfo(humanTaskId, documentId, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an Image for a page extracted from the processed file. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpagetextGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpagetextGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGet (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetWithHttpInfo(humanTaskId, documentId, pageNumber, x1, y1, x2, y2);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageTextInABox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (x1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x1", x1)); // query parameter
            if (y1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y1", y1)); // query parameter
            if (x2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x2", x2)); // query parameter
            if (y2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y2", y2)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetAsync (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetAsyncWithHttpInfo(humanTaskId, documentId, pageNumber, x1, y1, x2, y2);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="x1"> (optional)</param>
        /// <param name="y1"> (optional)</param>
        /// <param name="x2"> (optional)</param>
        /// <param name="y2"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGetAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, int? pageNumber = null, double? x1 = null, double? y1 = null, double? x2 = null, double? y2 = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetPageTextInABox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (x1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x1", x1)); // query parameter
            if (y1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y1", y1)); // query parameter
            if (x2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x2", x2)); // query parameter
            if (y2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y2", y2)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetpagetextinaboxGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets a list of task queues defined in the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> ApiServicesAppDocumentprocessingengineserviceGetqueuesGet ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetqueuesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of task queues defined in the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > ApiServicesAppDocumentprocessingengineserviceGetqueuesGetWithHttpInfo ()
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetQueues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetQueuesResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// Gets a list of task queues defined in the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> ApiServicesAppDocumentprocessingengineserviceGetqueuesGetAsync ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetqueuesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of task queues defined in the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> ApiServicesAppDocumentprocessingengineserviceGetqueuesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetQueues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetqueuesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;ExtractedSession&gt;</returns>
        public List<ExtractedSession> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGet (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedSession>> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetWithHttpInfo(humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExtractedSession&gt;</returns>
        public ApiResponse< List<ExtractedSession> > ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetStatistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetstatisticsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedSession>)));
        }

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;ExtractedSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExtractedSession>> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetAsync (Guid? humanTaskId = null)
        {
             ApiResponse<List<ExtractedSession>> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetAsyncWithHttpInfo(humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Status and Statistics of the Documents Processed for a given Task 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExtractedSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExtractedSession>>> ApiServicesAppDocumentprocessingengineserviceGetstatisticsGetAsyncWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetStatistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetstatisticsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExtractedSession>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExtractedSession>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExtractedSession>)));
        }

        /// <summary>
        /// Gets the current status of the HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>string</returns>
        public string ApiServicesAppDocumentprocessingengineserviceGetstatusGet (string humanTaskId = null)
        {
             ApiResponse<string> localVarResponse = ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo(humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current status of the HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo (string humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetStringResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        public DocumentStatus GetDocumentStatus(string humanTaskId = null)
        {
            var documentStatus = new DocumentStatus();
            documentStatus.Status = ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo(humanTaskId).Data;

            if (documentStatus.Status == "Processed")
            {
                documentStatus.IsDocumentCompleted = true;
                documentStatus.HasError = false;
                documentStatus.IsCurrentlyProcessing = false;
                documentStatus.IsSuccessful = true;
            }
            else
                documentStatus.IsSuccessful = false;

            if (documentStatus.Status == "InProgress")
            {
                documentStatus.HasError = false;
                documentStatus.IsCurrentlyProcessing = true;
                documentStatus.IsDocumentCompleted = false;
            }

            if (documentStatus.Status == "CompletedWithError")
            {
                documentStatus.IsDocumentCompleted = true;
                documentStatus.HasError = true;
                documentStatus.IsCurrentlyProcessing = false;
            }

            return documentStatus;
        }

        public bool IsDocumentCompleted(string status)
        {
            if (status == "InProgress" || status == "Created")
                return false;
            else return true;
        }

        /// <summary>
        /// Gets the current status of the HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiServicesAppDocumentprocessingengineserviceGetstatusGetAsync (string humanTaskId = null)
        {
             ApiResponse<string> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceGetstatusGetAsyncWithHttpInfo(humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current status of the HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">ID (Guid) of the task for which the status is needed. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiServicesAppDocumentprocessingengineserviceGetstatusGetAsyncWithHttpInfo (string humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceGetstatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>bool?</returns>
        public bool? ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPost (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null)
        {
             ApiResponse<bool?> localVarResponse = ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostWithHttpInfo(humanTaskId, documentId, isSkipped);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/MarkDocumentAsSkipped";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (isSkipped != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSkipped", isSkipped)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostAsync (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostAsyncWithHttpInfo(humanTaskId, documentId, isSkipped);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="isSkipped"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPostAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isSkipped = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/MarkDocumentAsSkipped";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (isSkipped != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSkipped", isSkipped)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceMarkdocumentasskippedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27; 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>bool?</returns>
        public bool? ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPost (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null)
        {
             ApiResponse<bool?> localVarResponse = ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostWithHttpInfo(humanTaskId, documentId, isVerified);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27; 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/MarkDocumentAsVerified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (isVerified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isVerified", isVerified)); // query parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkDocumentAsVerified", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<GetBoolResult>(localVarResponse.Content);
            bool result = response.Result;

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27; 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostAsync (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostAsyncWithHttpInfo(humanTaskId, documentId, isVerified);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks a Document as Verified (or not).   This would typically be done if a Human Document Worker has reviewed a document and has verified all fields to be correct.  If all documents are marked as &#x27;Verfied&#x27; the entire session/task is also marked as Verified.  and viceaversa, if any document is marked as &#x27;Not Verified&#x27;  the entire session/task is also marked as &#x27;Not Verified&#x27; 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId">(Guid) Task ID (optional)</param>
        /// <param name="documentId">(Guid) Document ID to be Marked (optional)</param>
        /// <param name="isVerified">Is the document verfied true/false. Set to true by default. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPostAsyncWithHttpInfo (Guid? humanTaskId = null, Guid? documentId = null, bool? isVerified = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/MarkDocumentAsVerified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (isVerified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isVerified", isVerified)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceMarkdocumentasverifiedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGet (Guid? humanTaskId = null)
        {
             ApiResponse<List<string>> localVarResponse = ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetWithHttpInfo(humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/PossibleNextStates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetAsync (Guid? humanTaskId = null)
        {
             ApiResponse<List<string>> localVarResponse = await ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetAsyncWithHttpInfo(humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Given a Task&#x27;s current status, provides possible next states in the State machine 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGetAsyncWithHttpInfo (Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/PossibleNextStates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineservicePossiblenextstatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPost (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<Guid?> localVarResponse = ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostWithHttpInfo(body, humanTaskId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostWithHttpInfo (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/SaveDocumentData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostAsync (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null)
        {
             ApiResponse<Guid?> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostAsyncWithHttpInfo(body, humanTaskId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves the edited extracted data for a given Document for a HumanTask 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPostAsyncWithHttpInfo (DocumentContentSaveView body = null, Guid? humanTaskId = null, Guid? documentId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/SaveDocumentData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceSavedocumentdataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>SubmitDocumentResponse</returns>
        public SubmitDocumentResponse ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPost (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null)
        {
             ApiResponse<SubmitDocumentResponse> localVarResponse = ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostWithHttpInfo(files, taskQueueId, name, description, caseNumber, caseType, assignedTo, dueOn, humanTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>ApiResponse of SubmitDocumentResponse</returns>
        public ApiResponse< SubmitDocumentResponse > ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostWithHttpInfo (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/SubmitDocumentsWithDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (files != null)
            {
                foreach (var _file in files)
                    localVarFileParams.Add(_file.Name, this.Configuration.ApiClient.ParameterToFile("files", _file));
            }
            if (taskQueueId != null) localVarFormParams.Add("taskQueueId", this.Configuration.ApiClient.ParameterToString(taskQueueId)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (caseNumber != null) localVarFormParams.Add("caseNumber", this.Configuration.ApiClient.ParameterToString(caseNumber)); // form parameter
            if (caseType != null) localVarFormParams.Add("caseType", this.Configuration.ApiClient.ParameterToString(caseType)); // form parameter
            if (assignedTo != null) localVarFormParams.Add("assignedTo", this.Configuration.ApiClient.ParameterToString(assignedTo)); // form parameter
            if (dueOn != null) localVarFormParams.Add("dueOn", this.Configuration.ApiClient.ParameterToString(dueOn)); // form parameter
            localVarFormParams.Add("tenantId", this.Configuration.ApiClient.ParameterToString(0)); // form parameter

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitDocumentsWithDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<SubmitDocumentResponseResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<SubmitDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of SubmitDocumentResponse</returns>
        public async System.Threading.Tasks.Task<SubmitDocumentResponse> ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostAsync (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null)
        {
             ApiResponse<SubmitDocumentResponse> localVarResponse = await ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostAsyncWithHttpInfo(files, taskQueueId, name, description, caseNumber, caseType, assignedTo, dueOn, humanTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"> (optional)</param>
        /// <param name="taskQueueId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="caseNumber"> (optional)</param>
        /// <param name="caseType"> (optional)</param>
        /// <param name="assignedTo"> (optional)</param>
        /// <param name="dueOn"> (optional)</param>
        /// <param name="humanTaskId"> (optional)</param>
        /// <returns>Task of ApiResponse (SubmitDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmitDocumentResponse>> ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostAsyncWithHttpInfo (List<System.IO.FileStream> files = null, Guid? taskQueueId = null, string name = null, string description = null, string caseNumber = null, string caseType = null, string assignedTo = null, string dueOn = null, Guid? humanTaskId = null)
        {

            var localVarPath = "/api/services/app/DocumentProcessingEngineService/SubmitDocumentsWithDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (humanTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "humanTaskId", humanTaskId)); // query parameter
            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            if (taskQueueId != null) localVarFormParams.Add("taskQueueId", this.Configuration.ApiClient.ParameterToString(taskQueueId)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (caseNumber != null) localVarFormParams.Add("caseNumber", this.Configuration.ApiClient.ParameterToString(caseNumber)); // form parameter
            if (caseType != null) localVarFormParams.Add("caseType", this.Configuration.ApiClient.ParameterToString(caseType)); // form parameter
            if (assignedTo != null) localVarFormParams.Add("assignedTo", this.Configuration.ApiClient.ParameterToString(assignedTo)); // form parameter
            if (dueOn != null) localVarFormParams.Add("dueOn", this.Configuration.ApiClient.ParameterToString(dueOn)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmitDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Guid?</returns>
        public Guid? ApiServicesAppHumantasksCreateoreditPost(CreateOrEditHumanTaskDto body = null)
        {
            ApiResponse<Guid?> localVarResponse = ApiServicesAppHumantasksCreateoreditPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse<Guid?> ApiServicesAppHumantasksCreateoreditPostWithHttpInfo(CreateOrEditHumanTaskDto body = null)
        {

            var localVarPath = "/api/services/app/HumanTasks/CreateOrEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HumanTasks.CreateOrEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            var response = JsonConvert.DeserializeObject<CreateOrEditResult>(localVarResponse.Content);
            var result = response.Result;

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                result);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> ApiServicesAppHumantasksCreateoreditPostAsync(CreateOrEditHumanTaskDto body = null)
        {
            ApiResponse<Guid?> localVarResponse = await ApiServicesAppHumantasksCreateoreditPostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> ApiServicesAppHumantasksCreateoreditPostAsyncWithHttpInfo(CreateOrEditHumanTaskDto body = null)
        {

            var localVarPath = "/api/services/app/HumanTasks/CreateOrEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesAppHumantasksCreateoreditPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid?)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        public DocumentResult SaveDocumentResults(Guid humanTaskId, bool awaitCompletion, bool savePageImages, bool savePageText, int timeout, string outputFolder, DataTable dataTable)
        {
            bool hasFailed = true;
            bool isCompleted = false;
            string status = "";
            string saveJson = "";
            DocumentInfo docInfo = new DocumentInfo();
            docInfo.TaskId = humanTaskId.ToString();
            List<string> datacolumns = new List<string>();

            // Prepare DataTable if it doesnt have default rows
            if (dataTable == null)
            {
                dataTable = new DataTable("ExtractedData");
            }
            if (dataTable != null)
            {
                datacolumns = dataTable.Columns.Cast<DataColumn>()
                                   .Select(x => x.ColumnName).ToList();

                if (!datacolumns.Contains("FileName"))
                    dataTable.Columns.Add(new DataColumn("FileName", typeof(string)));

                //TaskId	DocumentId	Pages	Schema	IsUnstructured
                if (!datacolumns.Contains("TaskId"))
                    dataTable.Columns.Add(new DataColumn("TaskId", typeof(string)));

                if (!datacolumns.Contains("DocumentId"))
                    dataTable.Columns.Add(new DataColumn("DocumentId", typeof(string)));

                if (!datacolumns.Contains("Pages"))
                    dataTable.Columns.Add(new DataColumn("Pages", typeof(string)));

                if (!datacolumns.Contains("Schema"))
                    dataTable.Columns.Add(new DataColumn("Schema", typeof(string)));

                if (!datacolumns.Contains("IsUnstructured"))
                    dataTable.Columns.Add(new DataColumn("IsUnstructured", typeof(bool)));

                datacolumns = dataTable.Columns.Cast<DataColumn>()
                                 .Select(x => x.ColumnName).ToList();
            }

            //get status
            status = ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo(humanTaskId.ToString()).Data;

            // In case you dont want to wait for the processing, you can call GetStatus and check for status to be 'Processed'
            if (string.IsNullOrEmpty(status))
                Trace.WriteLine($"ERROR: Something went wrong. Status of a Task cannot be null.");

            if (status == "Created" || status == "Creating" || status == "InProgress" || status == "CompletedWithError" || status == "Error")
                Trace.WriteLine($"ERROR: Document is not processed yet. Most likely it timed out.");

            // Once the document is processed, GetDocuments will retrieve the Extracted Documents
            var docs = ApiServicesAppDocumentprocessingengineserviceGetdocumentsGetWithHttpInfo(humanTaskId).Data;
            if (docs == null)
                Trace.WriteLine($"ERROR: No documents extracted.");

            if (string.IsNullOrEmpty(outputFolder))
                throw new ArgumentNullException($"OutputFolder Directory not found");

            if (!Directory.Exists(outputFolder))
                Directory.CreateDirectory(outputFolder);

            if (!Directory.Exists(outputFolder))
                throw new DirectoryNotFoundException($"Directory {outputFolder} not found");

            DirectoryInfo targetFolder = new DirectoryInfo(outputFolder);

            int dociterator = 1;
            foreach (var doc in docs.OrderBy(d => d.Order))
            {
                DocumentContentView docData = null;
                //get document data for each document
                docData = ApiServicesAppDocumentprocessingengineserviceGetdocumentdataGetWithHttpInfo(humanTaskId, doc.DocumentId.Value).Data;
                Task.Delay(TimeSpan.FromSeconds(1)).Wait();

                DocumentView docSave = new DocumentView();
                docSave.TaskID = humanTaskId;
                docSave.Header = doc;
                docSave.Content = docData;

                string schemaName = doc.Schema.Replace(Path.DirectorySeparatorChar, '_').Replace("/", "_");

                DirectoryInfo docFolder = targetFolder.CreateSubdirectory($"{dociterator} ({schemaName})");

                docInfo.Add(dociterator, doc.Schema, doc.PageRangeLabel, docFolder.Name, doc.DocumentId.ToString());

                DataRow currentRow = null;
                if (dataTable != null)
                {
                    currentRow = dataTable.NewRow();
                    //  if (!datacolumns.Contains("FileName"))
                    currentRow["FileName"] = doc.Name;
                    currentRow["TaskId"] = humanTaskId.ToString();
                    currentRow["DocumentId"] = doc.DocumentId.ToString();

                    currentRow["Pages"] = doc.PageRangeLabel;
                    currentRow["Schema"] = doc.Schema;
                    currentRow["IsUnstructured"] = true;
                }

                if (!schemaName.ToLowerInvariant().Equals("unstructured", StringComparison.InvariantCultureIgnoreCase))
                {
                    if (!string.IsNullOrEmpty(docData.Content))
                    {
                        try
                        {
                            dynamic json = JsonConvert.DeserializeObject(docData.Content);
                            string jsonString = JsonConvert.SerializeObject(json, Formatting.Indented);
                            string dataFile = Path.Combine(docFolder.FullName, "data.json");
                            File.WriteAllText(dataFile, jsonString);
                            docSave.Content.Content = "";

                            if (dataTable != null)
                            {
                                var exData = ExtractedContentField.Parse(jsonString);
                                if (exData != null)
                                {
                                    foreach (string key in exData.Keys)
                                    {
                                        if (!datacolumns.Contains(key))
                                        {
                                            dataTable.Columns.Add(new DataColumn(key, typeof(string)));
                                        }
                                    }
                                }

                                datacolumns = dataTable.Columns.Cast<DataColumn>()
                               .Select(x => x.ColumnName).ToList();

                                if (dataTable != null)
                                {
                                    currentRow = dataTable.NewRow();
                                    currentRow["FileName"] = doc.Name;
                                    currentRow["TaskId"] = humanTaskId.ToString();
                                    currentRow["DocumentId"] = doc.DocumentId.ToString();

                                    currentRow["Pages"] = doc.PageRangeLabel;
                                    currentRow["Schema"] = doc.Schema;
                                    currentRow["IsUnstructured"] = false;
                                    foreach (string key in exData.Keys)
                                    {
                                        currentRow[key] = exData[key].value;
                                    }
                                }
                            }
                        }
                        catch (Exception ex) 
                        {
                            throw new Exception(ex.Message);
                        }
                    }
                }

                if (savePageText || savePageImages)
                {
                    foreach (var page in doc.Pages)
                    {
                        if (savePageImages)
                        {
                            Image pageImage = null;
                            try
                            {
                                //get page image
                                string pageDetails = ApiServicesAppDocumentprocessingengineserviceGetpageimageGetWithHttpInfo(humanTaskId, doc.DocumentId.Value, page.File.Value).Data;
                                var imageData = Convert.FromBase64String(pageDetails);
                                //Bitmap bmp;

                                using (var ms = new System.IO.MemoryStream(imageData))
                                {
                                    pageImage = Image.FromStream(ms);
                                    //bmp = new Bitmap(ms);
                                }

                                Task.Delay(TimeSpan.FromSeconds(1)).Wait();
                            }
                            catch { }

                            if (pageImage != null)
                            {
                                string imagePath = Path.Combine(docFolder.FullName, $"Page_{page.File.Value}.jpg");
                                var i2 = new Bitmap(pageImage);
                                i2.Save(imagePath, ImageFormat.Jpeg);
                            }
                        }

                        if (savePageText)
                        {
                            string pageText = "";

                            try
                            {
                                //get page text
                                pageText = ApiServicesAppDocumentprocessingengineserviceGetpagetextGetWithHttpInfo(humanTaskId, doc.DocumentId.Value, page.File.Value).Data;
                                Task.Delay(TimeSpan.FromSeconds(1)).Wait();
                            }
                            catch { }

                            if (!string.IsNullOrEmpty(pageText))
                            {
                                File.WriteAllText(Path.Combine(docFolder.FullName, $"{page.File.Value}.txt"), pageText);
                                docSave.Content.Content = "";
                            }
                        }
                    }
                }
                if (docSave != null)
                {
                    var docJsonContent = JsonConvert.SerializeObject(docSave, Formatting.Indented);
                    string docFile = Path.Combine(docFolder.FullName, "document.json");
                    File.WriteAllText(docFile, docJsonContent);
                }

                if (currentRow != null)
                    dataTable.Rows.Add(currentRow);

                dociterator++;
            }

            if (docInfo != null)
            {
                string docInfoFile = Path.Combine(targetFolder.FullName, "documents.json");
                var docInfoContent = docInfo.SerializeJSON();
                File.WriteAllText(docInfoFile, docInfoContent);
                saveJson = docInfoContent;
            }

            hasFailed = false;
            isCompleted = true;

            var documentResult = new DocumentResult()
            {
                OutputAsJSON = saveJson,
                OutputAsTable = docInfo.CreateDataTable(),
                DataAsTable = dataTable,
                Status = status,
                IsCompleted = isCompleted,
                HasFailedOrError = hasFailed
            };

            return documentResult;
        }

        public Dictionary<string, string> SubmitDocument(string fileToProcess, string taskQueueName = "", string name = "", string description = "", string caseNumber = "", string caseType = "", string assignedTo = "", DateTime? dueOn = null)
        {
            Guid? taskQueueId;

            //Trace.WriteLine($"Processing File {fileToProcess}");

            if (!File.Exists(fileToProcess))
                throw new FileNotFoundException($"ERROR: File not found.{fileToProcess}");

            //Submits the document to the server for processing

            if (string.IsNullOrEmpty(taskQueueName))
                taskQueueName = "Default";

            Dictionary<string, string> allQueues = null;

            //get queues
            allQueues = ApiServicesAppDocumentprocessingengineserviceGetqueuesGetWithHttpInfo().Data;

            if (allQueues == null)
                throw new CannotRetrieveQueuesException();

            if (!allQueues.Where(q => q.Value == taskQueueName).Any())
                throw new UnableToFindQueueException($"Unable to find queue {taskQueueName} ");

            var queueItem = allQueues.Where(kp => kp.Value == taskQueueName).FirstOrDefault();
            taskQueueId = new Guid(queueItem.Key);

            //// Submits the document to the server for processing
            CreateOrEditHumanTaskDto taskR = new CreateOrEditHumanTaskDto();

            if (taskQueueId != null && taskQueueId.HasValue)
                taskR.TaskQueueId = taskQueueId.Value;

            if (!string.IsNullOrEmpty(name))
                taskR.Name = name;

            if (!string.IsNullOrEmpty(description))
                taskR.Description = description;

            if (!string.IsNullOrEmpty(caseNumber))
                taskR.CaseNumber = caseNumber;

            if (!string.IsNullOrEmpty(caseType))
                taskR.CaseType = caseType;

            if (!string.IsNullOrEmpty(assignedTo))
                taskR.AssignedTo = assignedTo;

            if (dueOn != null)
                taskR.DueOn = dueOn;

            taskR.Status = "Creating";

            Guid? docId = ApiServicesAppHumantasksCreateoreditPostWithHttpInfo(taskR).Data;

            ApiResponse<SubmitDocumentResponse> response;
            using (System.IO.FileStream fs = new System.IO.FileStream(fileToProcess, FileMode.Open, FileAccess.Read))
            {
                var files = new List<System.IO.FileStream>() { fs };
                response = ApiServicesAppDocumentprocessingengineserviceSubmitdocumentswithdetailsPostWithHttpInfo(files, taskQueueId, name, description, caseNumber, caseType, assignedTo, dueOn.ToString(), docId);
            }

            string method = "Submit";
            if (response == null)
                throw new InvalidOperationException($"{method}:Url didn't return a valid response");

            if (response.Data == null)
                throw new InvalidCastException($"{method}:Url didn't return JSON with correct body");

            var docResponse = response.Data;

            if (docResponse == null)
                throw new CannotSubmitDocumentException();

            if (docResponse.HumanTaskID == null || docResponse.HumanTaskID == Guid.Empty)
                throw new InvalidDataException("ERROR: Service did not return any TaskID.");

            //// Retrieve the ID of the submitted document for further querying and retrieval.
            var humanTaskId = docResponse.HumanTaskID; // new Guid("00ea6030-40ce-4495-8ef2-418eb0845e62");// 

            string status = ApiServicesAppDocumentprocessingengineserviceGetstatusGetWithHttpInfo(humanTaskId.ToString()).Data;

            return new Dictionary<string, string>()
            {
                { "TaskID", humanTaskId.ToString() },
                { "Status", status }
            };
        }

        public DataTable CompareTable(string ignoreColumns, string lookupColumns, DataTable expected, DataTable actual)
        {
            if (expected == null)
                throw new ArgumentNullException("Expected table cannot be null");
            if (actual == null)
                throw new ArgumentNullException("Actual table cannot be null");
            if (string.IsNullOrEmpty(lookupColumns))
                throw new ArgumentNullException("Lookup columns cannot be empty");

            TableComparisonManager tcm = new TableComparisonManager()
            {
                IgnoreColumns = ignoreColumns,
                LookupColumns = lookupColumns
            };

            tcm.Compare(expected, actual);
            DataTable diff = tcm.Differences;
            return diff;
        }
    }
}
