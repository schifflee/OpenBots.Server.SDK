/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using Newtonsoft.Json;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAutomationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update an Automation&#x27;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;AutomationParameter&gt;</returns>
        List<AutomationParameter> ApiVapiVersionAutomationsAutomationIdUpdateParametersPost (string automationId, string apiVersion, string organizationId, List<AutomationParameter> body = null);

        /// <summary>
        /// Update an Automation&#x27;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AutomationParameter&gt;</returns>
        ApiResponse<List<AutomationParameter>> ApiVapiVersionAutomationsAutomationIdUpdateParametersPostWithHttpInfo (string automationId, string apiVersion, string organizationId, List<AutomationParameter> body = null);
        /// <summary>
        /// Gets count of Automations in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionAutomationsCountGet (string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of Automations in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionAutomationsCountGetWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Provides a list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationPaginatedList</returns>
        AutomationPaginatedList ApiVapiVersionAutomationsGet (string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationPaginatedList</returns>
        ApiResponse<AutomationPaginatedList> ApiVapiVersionAutomationsGetWithHttpInfo (string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>List&lt;JobAutomationLookup&gt;</returns>
        List<JobAutomationLookup> ApiVapiVersionAutomationsGetLookupGet (string apiVersion);

        /// <summary>
        /// Lookup list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of List&lt;JobAutomationLookup&gt;</returns>
        ApiResponse<List<JobAutomationLookup>> ApiVapiVersionAutomationsGetLookupGetWithHttpInfo (string apiVersion);
        /// <summary>
        /// Delete Automation with a specified id from list of Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAutomationsIdDelete (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Delete Automation with a specified id from list of Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAutomationsIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Updates partial details of an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAutomationsIdPatch (string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAutomationsIdPatchWithHttpInfo (string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Update Automation entity
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionAutomationsIdPut (string id, string apiVersion, AutomationViewModel body = null);

        /// <summary>
        /// Update Automation entity
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionAutomationsIdPutWithHttpInfo (string id, string apiVersion, AutomationViewModel body = null);
        /// <summary>
        /// Update Automation with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Automation</returns>
        Automation ApiVapiVersionAutomationsIdUpdatePost (string id, string apiVersion);

        /// <summary>
        /// Update Automation with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> ApiVapiVersionAutomationsIdUpdatePostWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Create a new Automation entity and file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Automation</returns>
        Automation ApiVapiVersionAutomationsPost (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine);

        /// <summary>
        /// Create a new Automation entity and file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> ApiVapiVersionAutomationsPostWithHttpInfo (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine);
        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AllAutomationsViewModelPaginatedList</returns>
        AllAutomationsViewModelPaginatedList ApiVapiVersionAutomationsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AllAutomationsViewModelPaginatedList</returns>
        ApiResponse<AllAutomationsViewModelPaginatedList> ApiVapiVersionAutomationsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AutomationViewModel</returns>
        AutomationViewModel ApiVapiVersionAutomationsViewIdGet (string id, string apiVersion);

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AutomationViewModel</returns>
        ApiResponse<AutomationViewModel> ApiVapiVersionAutomationsViewIdGetWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Export/download an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        System.IO.MemoryStream ExportAutomation (string id, string apiVersion, string organizationId);

        /// <summary>
        /// Export/download an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        ApiResponse<System.IO.MemoryStream> ExportAutomationWithHttpInfo (string id, string apiVersion, string organizationId);
        /// <summary>
        /// Get Automation by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>AutomationPaginatedList</returns>
        Automation GetAutomation (string id, string apiVersion, string organizationId);

        /// <summary>
        /// Get Automation by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AutomationPaginatedList</returns>
        ApiResponse<Automation> GetAutomationWithHttpInfo (string id, string apiVersion, string organizationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update an Automation&#x27;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;AutomationParameter&gt;</returns>
        System.Threading.Tasks.Task<List<AutomationParameter>> ApiVapiVersionAutomationsAutomationIdUpdateParametersPostAsync (string automationId, string organizationId, string apiVersion, List<AutomationParameter> body = null);

        /// <summary>
        /// Update an Automation&#x27;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AutomationParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutomationParameter>>> ApiVapiVersionAutomationsAutomationIdUpdateParametersPostAsyncWithHttpInfo (string automationId, string organizationId, string apiVersion, List<AutomationParameter> body = null);
        /// <summary>
        /// Gets count of Automations in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionAutomationsCountGetAsync (string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of Automations in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAutomationsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Provides a list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationPaginatedList</returns>
        System.Threading.Tasks.Task<AutomationPaginatedList> ApiVapiVersionAutomationsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationPaginatedList>> ApiVapiVersionAutomationsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of List&lt;JobAutomationLookup&gt;</returns>
        System.Threading.Tasks.Task<List<JobAutomationLookup>> ApiVapiVersionAutomationsGetLookupGetAsync (string apiVersion);

        /// <summary>
        /// Lookup list of all Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (List&lt;JobAutomationLookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobAutomationLookup>>> ApiVapiVersionAutomationsGetLookupGetAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Delete Automation with a specified id from list of Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdDeleteAsync (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Delete Automation with a specified id from list of Automations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Updates partial details of an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdPatchAsync (string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdPatchAsyncWithHttpInfo (string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Update Automation entity
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdPutAsync (string id, string apiVersion, AutomationViewModel body = null);

        /// <summary>
        /// Update Automation entity
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdPutAsyncWithHttpInfo (string id, string apiVersion, AutomationViewModel body = null);
        /// <summary>
        /// Update Automation with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> ApiVapiVersionAutomationsIdUpdatePostAsync (string id, string apiVersion);

        /// <summary>
        /// Update Automation with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> ApiVapiVersionAutomationsIdUpdatePostAsyncWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Create a new Automation entity and file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> ApiVapiVersionAutomationsPostAsync (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine);

        /// <summary>
        /// Create a new Automation entity and file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> ApiVapiVersionAutomationsPostAsyncWithHttpInfo (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine);
        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AllAutomationsViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AllAutomationsViewModelPaginatedList> ApiVapiVersionAutomationsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AllAutomationsViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllAutomationsViewModelPaginatedList>> ApiVapiVersionAutomationsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AutomationViewModel</returns>
        System.Threading.Tasks.Task<AutomationViewModel> ApiVapiVersionAutomationsViewIdGetAsync (string id, string apiVersion);

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AutomationViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationViewModel>> ApiVapiVersionAutomationsViewIdGetAsyncWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Export/download an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        System.Threading.Tasks.Task<System.IO.MemoryStream> ExportAutomationAsync (string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Export/download an Automation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportAutomationAsyncWithHttpInfo (string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Get Automation by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AutomationPaginatedList</returns>
        System.Threading.Tasks.Task<AutomationPaginatedList> GetAutomationAsync (string id, string apiVersion);

        /// <summary>
        /// Get Automation by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AutomationPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationPaginatedList>> GetAutomationAsyncWithHttpInfo (string id, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AutomationsApi : IAutomationsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AutomationsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutomationsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update an Automation&#x27;s parameters 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;AutomationParameter&gt;</returns>
        public List<AutomationParameter> ApiVapiVersionAutomationsAutomationIdUpdateParametersPost (string automationId, string apiVersion, string organizationId, List<AutomationParameter> body = null)
        {
             ApiResponse<List<AutomationParameter>> localVarResponse = ApiVapiVersionAutomationsAutomationIdUpdateParametersPostWithHttpInfo(automationId, apiVersion, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Automation&#x27;s parameters 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AutomationParameter&gt;</returns>
        public ApiResponse< List<AutomationParameter> > ApiVapiVersionAutomationsAutomationIdUpdateParametersPostWithHttpInfo (string automationId, string organizationId, string apiVersion, List<AutomationParameter> body = null)
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
                throw new ApiException(400, "Missing required parameter 'automationId' when calling AutomationsApi->ApiVapiVersionAutomationsAutomationIdUpdateParametersPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsAutomationIdUpdateParametersPost");

            var localVarPath = "/api/v{apiVersion}/Automations/{automationId}/UpdateParameters";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations/{automationId}/UpdateParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automationId != null) localVarPathParams.Add("automationId", this.Configuration.ApiClient.ParameterToString(automationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomationParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AutomationParameter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomationParameter>)));
        }

        /// <summary>
        /// Update an Automation&#x27;s parameters 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;AutomationParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutomationParameter>> ApiVapiVersionAutomationsAutomationIdUpdateParametersPostAsync (string automationId, string organizationId, string apiVersion, List<AutomationParameter> body = null)
        {
             ApiResponse<List<AutomationParameter>> localVarResponse = await ApiVapiVersionAutomationsAutomationIdUpdateParametersPostAsyncWithHttpInfo(automationId, organizationId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Automation&#x27;s parameters 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AutomationParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AutomationParameter>>> ApiVapiVersionAutomationsAutomationIdUpdateParametersPostAsyncWithHttpInfo (string automationId, string organizationId, string apiVersion, List<AutomationParameter> body = null)
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
                throw new ApiException(400, "Missing required parameter 'automationId' when calling AutomationsApi->ApiVapiVersionAutomationsAutomationIdUpdateParametersPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsAutomationIdUpdateParametersPost");

            var localVarPath = "/api/v{apiVersion}/Automations/{automationId}/UpdateParameters";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations/{automationId}/UpdateParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (automationId != null) localVarPathParams.Add("automationId", this.Configuration.ApiClient.ParameterToString(automationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AutomationParameter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AutomationParameter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AutomationParameter>)));
        }

        /// <summary>
        /// Gets count of Automations in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionAutomationsCountGet (string apiVersion, string filter = null)
        {
             ApiVapiVersionAutomationsCountGetWithHttpInfo(apiVersion, filter);
        }

        /// <summary>
        /// Gets count of Automations in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionAutomationsCountGetWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsCountGet");

            var localVarPath = "/api/v{apiVersion}/Automations/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of Automations in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionAutomationsCountGetAsync (string apiVersion, string filter = null)
        {
             await ApiVapiVersionAutomationsCountGetAsyncWithHttpInfo(apiVersion, filter);

        }

        /// <summary>
        /// Gets count of Automations in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAutomationsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsCountGet");

            var localVarPath = "/api/v{apiVersion}/Automations/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides a list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationPaginatedList</returns>
        public AutomationPaginatedList ApiVapiVersionAutomationsGet (string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AutomationPaginatedList> localVarResponse = ApiVapiVersionAutomationsGetWithHttpInfo(apiVersion, organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationPaginatedList</returns>
        public ApiResponse< AutomationPaginatedList > ApiVapiVersionAutomationsGetWithHttpInfo (string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsGet");

            var localVarPath = "/api/v{apiVersion}/Automations";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<AutomationPaginatedList>(localVarResponse.Content));
        }

        /// <summary>
        /// Provides a list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationPaginatedList</returns>
        public async System.Threading.Tasks.Task<AutomationPaginatedList> ApiVapiVersionAutomationsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AutomationPaginatedList> localVarResponse = await ApiVapiVersionAutomationsGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationPaginatedList>> ApiVapiVersionAutomationsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsGet");

            var localVarPath = "/api/v{apiVersion}/Automations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationPaginatedList)));
        }

        /// <summary>
        /// Lookup list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>List&lt;JobAutomationLookup&gt;</returns>
        public List<JobAutomationLookup> ApiVapiVersionAutomationsGetLookupGet (string apiVersion)
        {
             ApiResponse<List<JobAutomationLookup>> localVarResponse = ApiVapiVersionAutomationsGetLookupGetWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of List&lt;JobAutomationLookup&gt;</returns>
        public ApiResponse< List<JobAutomationLookup> > ApiVapiVersionAutomationsGetLookupGetWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsGetLookupGet");

            var localVarPath = "/api/v{apiVersion}/Automations/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobAutomationLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobAutomationLookup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobAutomationLookup>)));
        }

        /// <summary>
        /// Lookup list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of List&lt;JobAutomationLookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobAutomationLookup>> ApiVapiVersionAutomationsGetLookupGetAsync (string apiVersion)
        {
             ApiResponse<List<JobAutomationLookup>> localVarResponse = await ApiVapiVersionAutomationsGetLookupGetAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup list of all Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (List&lt;JobAutomationLookup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobAutomationLookup>>> ApiVapiVersionAutomationsGetLookupGetAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsGetLookupGet");

            var localVarPath = "/api/v{apiVersion}/Automations/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobAutomationLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobAutomationLookup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobAutomationLookup>)));
        }

        /// <summary>
        /// Delete Automation with a specified id from list of Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAutomationsIdDelete (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAutomationsIdDeleteWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Automation with a specified id from list of Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAutomationsIdDeleteWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdDelete");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Delete Automation with a specified id from list of Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdDeleteAsync (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAutomationsIdDeleteAsyncWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Automation with a specified id from list of Automations 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdDelete");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAutomationsIdPatch (string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAutomationsIdPatchWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAutomationsIdPatchWithHttpInfo (string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdPatch");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdPatchAsync (string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAutomationsIdPatchAsyncWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value of the Automation to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdPatchAsyncWithHttpInfo (string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdPatch");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update Automation entity Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionAutomationsIdPut (string id, string apiVersion, AutomationViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionAutomationsIdPutWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Automation entity Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionAutomationsIdPutWithHttpInfo (string id, string apiVersion, AutomationViewModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdPut");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update Automation entity Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionAutomationsIdPutAsync (string id, string apiVersion, AutomationViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionAutomationsIdPutAsyncWithHttpInfo(id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Automation entity Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionAutomationsIdPutAsyncWithHttpInfo (string id, string apiVersion, AutomationViewModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdPut");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update Automation with file Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Automation</returns>
        public Automation ApiVapiVersionAutomationsIdUpdatePost (string id, string apiVersion)
        {
             ApiResponse<Automation> localVarResponse = ApiVapiVersionAutomationsIdUpdatePostWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Automation with file Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Automation</returns>
        public ApiResponse< Automation > ApiVapiVersionAutomationsIdUpdatePostWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdUpdatePost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdUpdatePost");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (versionNumber != null) localVarFormParams.Add("VersionNumber", this.Configuration.ApiClient.ParameterToString(versionNumber)); // form parameter
            //if (versionId != null) localVarFormParams.Add("VersionId", this.Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            //if (status != null) localVarFormParams.Add("Status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (originalPackageName != null) localVarFormParams.Add("OriginalPackageName", this.Configuration.ApiClient.ParameterToString(originalPackageName)); // form parameter
            //if (publishedBy != null) localVarFormParams.Add("PublishedBy", this.Configuration.ApiClient.ParameterToString(publishedBy)); // form parameter
            //if (publishedOnUTC != null) localVarFormParams.Add("PublishedOnUTC", this.Configuration.ApiClient.ParameterToString(publishedOnUTC)); // form parameter
            //if (automationEngine != null) localVarFormParams.Add("AutomationEngine", this.Configuration.ApiClient.ParameterToString(automationEngine)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (automtationParameters != null) localVarFormParams.Add("AutomtationParameters", this.Configuration.ApiClient.ParameterToString(automtationParameters)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (isDeleted != null) localVarFormParams.Add("IsDeleted", this.Configuration.ApiClient.ParameterToString(isDeleted)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (deletedBy != null) localVarFormParams.Add("DeletedBy", this.Configuration.ApiClient.ParameterToString(deletedBy)); // form parameter
            //if (deleteOn != null) localVarFormParams.Add("DeleteOn", this.Configuration.ApiClient.ParameterToString(deleteOn)); // form parameter
            //if (timestamp != null) localVarFormParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (updatedBy != null) localVarFormParams.Add("UpdatedBy", this.Configuration.ApiClient.ParameterToString(updatedBy)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Automation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Automation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Automation)));
        }

        /// <summary>
        /// Update Automation with file Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> ApiVapiVersionAutomationsIdUpdatePostAsync (string id, string apiVersion)
        {
             ApiResponse<Automation> localVarResponse = await ApiVapiVersionAutomationsIdUpdatePostAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Automation with file Provides an action to update an Automation, when Automation id and the new details of Automation are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Automation>> ApiVapiVersionAutomationsIdUpdatePostAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsIdUpdatePost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsIdUpdatePost");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (versionNumber != null) localVarFormParams.Add("VersionNumber", this.Configuration.ApiClient.ParameterToString(versionNumber)); // form parameter
            //if (versionId != null) localVarFormParams.Add("VersionId", this.Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            //if (status != null) localVarFormParams.Add("Status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            //if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (originalPackageName != null) localVarFormParams.Add("OriginalPackageName", this.Configuration.ApiClient.ParameterToString(originalPackageName)); // form parameter
            //if (publishedBy != null) localVarFormParams.Add("PublishedBy", this.Configuration.ApiClient.ParameterToString(publishedBy)); // form parameter
            //if (publishedOnUTC != null) localVarFormParams.Add("PublishedOnUTC", this.Configuration.ApiClient.ParameterToString(publishedOnUTC)); // form parameter
            //if (automationEngine != null) localVarFormParams.Add("AutomationEngine", this.Configuration.ApiClient.ParameterToString(automationEngine)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (automtationParameters != null) localVarFormParams.Add("AutomtationParameters", this.Configuration.ApiClient.ParameterToString(automtationParameters)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (isDeleted != null) localVarFormParams.Add("IsDeleted", this.Configuration.ApiClient.ParameterToString(isDeleted)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (deletedBy != null) localVarFormParams.Add("DeletedBy", this.Configuration.ApiClient.ParameterToString(deletedBy)); // form parameter
            //if (deleteOn != null) localVarFormParams.Add("DeleteOn", this.Configuration.ApiClient.ParameterToString(deleteOn)); // form parameter
            //if (timestamp != null) localVarFormParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (updatedBy != null) localVarFormParams.Add("UpdatedBy", this.Configuration.ApiClient.ParameterToString(updatedBy)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsIdUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Automation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Automation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Automation)));
        }

        /// <summary>
        /// Create a new Automation entity and file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Automation</returns>
        public Automation ApiVapiVersionAutomationsPost (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine)
        {
             ApiResponse<Automation> localVarResponse = ApiVapiVersionAutomationsPostWithHttpInfo(apiVersion, organizationId, name, _file, automationEngine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Automation entity and file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Automation</returns>
        public ApiResponse< Automation > ApiVapiVersionAutomationsPostWithHttpInfo (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsPost");

            var localVarPath = "/api/v{apiVersion}/Automations";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organization/{organizationId}/Automations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId));  // path parameter
            //if (versionNumber != null) localVarFormParams.Add("VersionNumber", this.Configuration.ApiClient.ParameterToString(versionNumber)); // form parameter
            //if (versionId != null) localVarFormParams.Add("VersionId", this.Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            //if (status != null) localVarFormParams.Add("Status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (_file != null) localVarFileParams.Add(_file.Name, this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (originalPackageName != null) localVarFormParams.Add("OriginalPackageName", this.Configuration.ApiClient.ParameterToString(originalPackageName)); // form parameter
            //if (publishedBy != null) localVarFormParams.Add("PublishedBy", this.Configuration.ApiClient.ParameterToString(publishedBy)); // form parameter
            //if (publishedOnUTC != null) localVarFormParams.Add("PublishedOnUTC", this.Configuration.ApiClient.ParameterToString(publishedOnUTC)); // form parameter
            if (automationEngine != null) localVarFormParams.Add("AutomationEngine", this.Configuration.ApiClient.ParameterToString(automationEngine)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (automtationParameters != null) localVarFormParams.Add("AutomtationParameters", this.Configuration.ApiClient.ParameterToString(automtationParameters)); // form parameter
            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (isDeleted != null) localVarFormParams.Add("IsDeleted", this.Configuration.ApiClient.ParameterToString(isDeleted)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (deletedBy != null) localVarFormParams.Add("DeletedBy", this.Configuration.ApiClient.ParameterToString(deletedBy)); // form parameter
            //if (deleteOn != null) localVarFormParams.Add("DeleteOn", this.Configuration.ApiClient.ParameterToString(deleteOn)); // form parameter
            //if (timestamp != null) localVarFormParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (updatedBy != null) localVarFormParams.Add("UpdatedBy", this.Configuration.ApiClient.ParameterToString(updatedBy)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Automation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<Automation>(localVarResponse.Content));
        }

        /// <summary>
        /// Create a new Automation entity and file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> ApiVapiVersionAutomationsPostAsync (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine)
        {
             ApiResponse<Automation> localVarResponse = await ApiVapiVersionAutomationsPostAsyncWithHttpInfo(apiVersion, organizationId, name, _file, automationEngine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Automation entity and file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Automation>> ApiVapiVersionAutomationsPostAsyncWithHttpInfo (string apiVersion, string organizationId, string name, System.IO.FileStream _file, string automationEngine)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsPost");

            var localVarPath = "/api/v{apiVersion}/Automations";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            //if (versionNumber != null) localVarFormParams.Add("VersionNumber", this.Configuration.ApiClient.ParameterToString(versionNumber)); // form parameter
            //if (versionId != null) localVarFormParams.Add("VersionId", this.Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            //if (status != null) localVarFormParams.Add("Status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (_file != null) localVarFileParams.Add(_file.Name, this.Configuration.ApiClient.ParameterToFile("File", _file));
            //if (fileId != null) localVarFormParams.Add("FileId", this.Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            //if (originalPackageName != null) localVarFormParams.Add("OriginalPackageName", this.Configuration.ApiClient.ParameterToString(originalPackageName)); // form parameter
            //if (publishedBy != null) localVarFormParams.Add("PublishedBy", this.Configuration.ApiClient.ParameterToString(publishedBy)); // form parameter
            //if (publishedOnUTC != null) localVarFormParams.Add("PublishedOnUTC", this.Configuration.ApiClient.ParameterToString(publishedOnUTC)); // form parameter
            if (automationEngine != null) localVarFormParams.Add("AutomationEngine", this.Configuration.ApiClient.ParameterToString(automationEngine)); // form parameter
            //if (driveName != null) localVarFormParams.Add("DriveName", this.Configuration.ApiClient.ParameterToString(driveName)); // form parameter
            //if (automtationParameters != null) localVarFormParams.Add("AutomtationParameters", this.Configuration.ApiClient.ParameterToString(automtationParameters)); // form parameter
            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (id != null) localVarFormParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            //if (isDeleted != null) localVarFormParams.Add("IsDeleted", this.Configuration.ApiClient.ParameterToString(isDeleted)); // form parameter
            //if (createdBy != null) localVarFormParams.Add("CreatedBy", this.Configuration.ApiClient.ParameterToString(createdBy)); // form parameter
            //if (createdOn != null) localVarFormParams.Add("CreatedOn", this.Configuration.ApiClient.ParameterToString(createdOn)); // form parameter
            //if (deletedBy != null) localVarFormParams.Add("DeletedBy", this.Configuration.ApiClient.ParameterToString(deletedBy)); // form parameter
            //if (deleteOn != null) localVarFormParams.Add("DeleteOn", this.Configuration.ApiClient.ParameterToString(deleteOn)); // form parameter
            //if (timestamp != null) localVarFormParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // form parameter
            //if (updatedOn != null) localVarFormParams.Add("UpdatedOn", this.Configuration.ApiClient.ParameterToString(updatedOn)); // form parameter
            //if (updatedBy != null) localVarFormParams.Add("UpdatedBy", this.Configuration.ApiClient.ParameterToString(updatedBy)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            var automation = JsonConvert.DeserializeObject<Automation>(localVarResponse.Content);

            return new ApiResponse<Automation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                automation);
        }

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AllAutomationsViewModelPaginatedList</returns>
        public AllAutomationsViewModelPaginatedList ApiVapiVersionAutomationsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AllAutomationsViewModelPaginatedList> localVarResponse = ApiVapiVersionAutomationsViewGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AllAutomationsViewModelPaginatedList</returns>
        public ApiResponse< AllAutomationsViewModelPaginatedList > ApiVapiVersionAutomationsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsViewGet");

            var localVarPath = "/api/v{apiVersion}/Automations/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllAutomationsViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllAutomationsViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllAutomationsViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AllAutomationsViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AllAutomationsViewModelPaginatedList> ApiVapiVersionAutomationsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AllAutomationsViewModelPaginatedList> localVarResponse = await ApiVapiVersionAutomationsViewGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a view model list of all Automations and corresponding Automation version information 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AllAutomationsViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllAutomationsViewModelPaginatedList>> ApiVapiVersionAutomationsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsViewGet");

            var localVarPath = "/api/v{apiVersion}/Automations/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllAutomationsViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllAutomationsViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllAutomationsViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AutomationViewModel</returns>
        public AutomationViewModel ApiVapiVersionAutomationsViewIdGet (string id, string apiVersion)
        {
             ApiResponse<AutomationViewModel> localVarResponse = ApiVapiVersionAutomationsViewIdGetWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AutomationViewModel</returns>
        public ApiResponse< AutomationViewModel > ApiVapiVersionAutomationsViewIdGetWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsViewIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsViewIdGet");

            var localVarPath = "/api/v{apiVersion}/Automations/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationViewModel)));
        }

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AutomationViewModel</returns>
        public async System.Threading.Tasks.Task<AutomationViewModel> ApiVapiVersionAutomationsViewIdGetAsync (string id, string apiVersion)
        {
             ApiResponse<AutomationViewModel> localVarResponse = await ApiVapiVersionAutomationsViewIdGetAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an Automation&#x27;s view model details for a particular Automation id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Automation id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AutomationViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationViewModel>> ApiVapiVersionAutomationsViewIdGetAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ApiVapiVersionAutomationsViewIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ApiVapiVersionAutomationsViewIdGet");

            var localVarPath = "/api/v{apiVersion}/Automations/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAutomationsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationViewModel)));
        }

        /// <summary>
        /// Export/download an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        public System.IO.MemoryStream ExportAutomation (string id, string apiVersion, string organizationId)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = ExportAutomationWithHttpInfo(id, apiVersion, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export/download an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        public ApiResponse< System.IO.MemoryStream > ExportAutomationWithHttpInfo (string id, string apiVersion, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ExportAutomation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ExportAutomation");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}/Export";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            //if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            byte[] byteArray = localVarResponse.RawBytes;
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            stream.Write(byteArray, 0, byteArray.Length);

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                stream);
        }

        /// <summary>
        /// Export/download an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        public async System.Threading.Tasks.Task<System.IO.MemoryStream> ExportAutomationAsync (string id, string apiVersion, string driveName = null)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = await ExportAutomationAsyncWithHttpInfo(id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export/download an Automation 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportAutomationAsyncWithHttpInfo (string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->ExportAutomation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->ExportAutomation");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.MemoryStream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.MemoryStream)));
        }

        /// <summary>
        /// Get Automation by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>AutomationPaginatedList</returns>
        public Automation GetAutomation (string id, string apiVersion, string organizationId)
        {
             ApiResponse<Automation> localVarResponse = GetAutomationWithHttpInfo(id, apiVersion, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Automation by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AutomationPaginatedList</returns>
        public ApiResponse< Automation > GetAutomationWithHttpInfo (string id, string apiVersion, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->GetAutomation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->GetAutomation");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Automation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<Automation>(localVarResponse.Content));
        }

        /// <summary>
        /// Get Automation by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AutomationPaginatedList</returns>
        public async System.Threading.Tasks.Task<AutomationPaginatedList> GetAutomationAsync (string id, string apiVersion)
        {
             ApiResponse<AutomationPaginatedList> localVarResponse = await GetAutomationAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Automation by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AutomationPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationPaginatedList>> GetAutomationAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationsApi->GetAutomation");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AutomationsApi->GetAutomation");

            var localVarPath = "/api/v{apiVersion}/Automations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationPaginatedList)));
        }

    }
}
