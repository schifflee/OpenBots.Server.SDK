/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using Newtonsoft.Json;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IQueueItemAttachmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet (string queueItemId, string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null);
        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete (string queueItemId, string apiVersion, string driveName = null);

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteWithHttpInfo (string queueItemId, string apiVersion, string driveName = null);
        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments
        /// </summary>
        /// <remarks>
        /// Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost (string queueItemId, string apiVersion, List<string> body = null, string driveName = null);

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments
        /// </summary>
        /// <remarks>
        /// Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostWithHttpInfo (string queueItemId, string apiVersion, List<string> body = null, string driveName = null);
        /// <summary>
        /// Provides all queue item attachments for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IActionResult</returns>
        PaginatedList<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all queue item attachments for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<PaginatedList<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete (string id, string apiVersion, string queueItemId, string driveName = null);

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null);
        /// <summary>
        /// Updates partial details of queue item attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailAttachment</returns>
        EmailAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch (string id, string apiVersion, string queueItemId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of queue item attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailAttachment</returns>
        ApiResponse<EmailAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchWithHttpInfo (string id, string apiVersion, string queueItemId, List<Operation> body = null);
        /// <summary>
        /// Updates a queue item attachment with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>QueueItemAttachment</returns>
        QueueItemAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut (string queueItemId, string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Updates a queue item attachment with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of QueueItemAttachment</returns>
        ApiResponse<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutWithHttpInfo (string queueItemId, string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Attach files to a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>QueueItemAttachment</returns>
        QueueItemAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost (string queueItemId, string apiVersion, List<System.IO.FileStream> attachmentsList);

        /// <summary>
        /// Attach files to a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of QueueItemAttachment</returns>
        ApiResponse<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostWithHttpInfo (string queueItemId, string apiVersion, List<System.IO.FileStream> attachmentsList);
        /// <summary>
        /// Provides all queue item attachments view for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AllQueueItemAttachmentsViewModelPaginatedList</returns>
        AllQueueItemAttachmentsViewModelPaginatedList ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all queue item attachments view for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AllQueueItemAttachmentsViewModelPaginatedList</returns>
        ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Export/download a queue item attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        System.IO.MemoryStream ExportQueueItemAttachment (string id, string apiVersion, string queueItemId, string driveName = null);

        /// <summary>
        /// Export/download a queue item attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        ApiResponse<System.IO.MemoryStream> ExportQueueItemAttachmentWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null);
        /// <summary>
        /// Get queue item attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>QueueItemAttachmentPaginatedList</returns>
        QueueItemAttachmentPaginatedList GetQueueItemAttachments (string id, string apiVersion, string queueItemId);

        /// <summary>
        /// Get queue item attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>ApiResponse of QueueItemAttachmentPaginatedList</returns>
        ApiResponse<QueueItemAttachmentPaginatedList> GetQueueItemAttachmentsWithHttpInfo (string id, string apiVersion, string queueItemId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetAsync (string queueItemId, string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string filter = null);
        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteAsync (string queueItemId, string apiVersion, string driveName = null);

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteAsyncWithHttpInfo (string queueItemId, string apiVersion, string driveName = null);
        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments
        /// </summary>
        /// <remarks>
        /// Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostAsync (string queueItemId, string apiVersion, List<string> body = null, string driveName = null);

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments
        /// </summary>
        /// <remarks>
        /// Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostAsyncWithHttpInfo (string queueItemId, string apiVersion, List<string> body = null, string driveName = null);
        /// <summary>
        /// Provides all queue item attachments for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<PaginatedList<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetAsync (string queueItemId, string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all queue item attachments for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedList<QueueItemAttachment>>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteAsync (string id, string apiVersion, string queueItemId, string driveName = null);

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null);
        /// <summary>
        /// Updates partial details of queue item attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailAttachment</returns>
        System.Threading.Tasks.Task<EmailAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchAsync (string id, string apiVersion, string queueItemId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of queue item attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchAsyncWithHttpInfo (string id, string apiVersion, string queueItemId, List<Operation> body = null);
        /// <summary>
        /// Updates a queue item attachment with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of QueueItemAttachment</returns>
        System.Threading.Tasks.Task<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutAsync (string queueItemId, string id, string apiVersion, string driveName = null);

        /// <summary>
        /// Updates a queue item attachment with file
        /// </summary>
        /// <remarks>
        /// Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutAsyncWithHttpInfo (string queueItemId, string id, string apiVersion, string driveName = null);
        /// <summary>
        /// Attach files to a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of QueueItemAttachment</returns>
        System.Threading.Tasks.Task<List<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostAsync (string queueItemId, string apiVersion, string organizationId, List<System.IO.FileStream> attachmentsList);

        /// <summary>
        /// Attach files to a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueItemAttachment>>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostAsyncWithHttpInfo (string queueItemId, string apiVersion, string organizationId, List<System.IO.FileStream> attachmentsList);
        /// <summary>
        /// Provides all queue item attachments view for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AllQueueItemAttachmentsViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AllQueueItemAttachmentsViewModelPaginatedList> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetAsync (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all queue item attachments view for a queue item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AllQueueItemAttachmentsViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Export/download a queue item attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        System.Threading.Tasks.Task<System.IO.MemoryStream> ExportQueueItemAttachmentAsync (string id, string apiVersion, string organizationId, string queueItemId, string driveName = null);

        /// <summary>
        /// Export/download a queue item attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportQueueItemAttachmentAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string queueItemId, string driveName = null);
        /// <summary>
        /// Get queue item attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>Task of QueueItemAttachmentPaginatedList</returns>
        System.Threading.Tasks.Task<QueueItemAttachmentPaginatedList> GetQueueItemAttachmentsAsync (string id, string apiVersion, string queueItemId);

        /// <summary>
        /// Get queue item attachment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>Task of ApiResponse (QueueItemAttachmentPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemAttachmentPaginatedList>> GetQueueItemAttachmentsAsyncWithHttpInfo (string id, string apiVersion, string queueItemId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class QueueItemAttachmentsApi : IQueueItemAttachmentsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemAttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueItemAttachmentsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemAttachmentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public QueueItemAttachmentsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemAttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueueItemAttachmentsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet (string queueItemId, string apiVersion, string filter = null)
        {
             ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetWithHttpInfo(queueItemId, apiVersion, filter);
        }

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetAsync (string queueItemId, string apiVersion, string filter = null)
        {
             await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetAsyncWithHttpInfo(queueItemId, apiVersion, filter);

        }

        /// <summary>
        /// Gets count of queue item attachments related to a queue item in the database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string filter = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete (string queueItemId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteWithHttpInfo(queueItemId, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteWithHttpInfo (string queueItemId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteAsync (string queueItemId, string apiVersion, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteAsyncWithHttpInfo(queueItemId, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all queue item attachments with a specified queue item id from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDeleteAsyncWithHttpInfo (string queueItemId, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost (string queueItemId, string apiVersion, List<string> body = null, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostWithHttpInfo(queueItemId, apiVersion, body, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostWithHttpInfo (string queueItemId, string apiVersion, List<string> body = null, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostAsync (string queueItemId, string apiVersion, List<string> body = null, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostAsyncWithHttpInfo(queueItemId, apiVersion, body, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds queue item attachments using existing files to the existing queue item attachments Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPostAsyncWithHttpInfo (string queueItemId, string apiVersion, List<string> body = null, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Provides all queue item attachments for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IActionResult</returns>
        public PaginatedList<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PaginatedList<QueueItemAttachment>> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetWithHttpInfo(queueItemId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides all queue item attachments for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<PaginatedList<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedList<QueueItemAttachment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<PaginatedList<QueueItemAttachment>>(localVarResponse.Content));
        }

        /// <summary>
        /// Provides all queue item attachments for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<PaginatedList<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetAsync (string queueItemId, string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PaginatedList<QueueItemAttachment>> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetAsyncWithHttpInfo(queueItemId, apiVersion, organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides all queue item attachments for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedList<QueueItemAttachment>>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueItemAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedList<QueueItemAttachment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<PaginatedList<QueueItemAttachment>>(localVarResponse.Content));
        }

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete (string id, string apiVersion, string queueItemId, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteWithHttpInfo(id, apiVersion, queueItemId, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteAsync (string id, string apiVersion, string queueItemId, string driveName = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteAsyncWithHttpInfo(id, apiVersion, queueItemId, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete specific queue item attachment from list of queue item attachments 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of queue item attachment 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailAttachment</returns>
        public EmailAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch (string id, string apiVersion, string queueItemId, List<Operation> body = null)
        {
             ApiResponse<EmailAttachment> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchWithHttpInfo(id, apiVersion, queueItemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of queue item attachment 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailAttachment</returns>
        public ApiResponse< EmailAttachment > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchWithHttpInfo (string id, string apiVersion, string queueItemId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailAttachment)));
        }

        /// <summary>
        /// Updates partial details of queue item attachment 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailAttachment</returns>
        public async System.Threading.Tasks.Task<EmailAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchAsync (string id, string apiVersion, string queueItemId, List<Operation> body = null)
        {
             ApiResponse<EmailAttachment> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchAsyncWithHttpInfo(id, apiVersion, queueItemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of queue item attachment 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatchAsyncWithHttpInfo (string id, string apiVersion, string queueItemId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailAttachment)));
        }

        /// <summary>
        /// Updates a queue item attachment with file Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>QueueItemAttachment</returns>
        public QueueItemAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut (string queueItemId, string id, string apiVersion, string driveName = null)
        {
             ApiResponse<QueueItemAttachment> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutWithHttpInfo(queueItemId, id, apiVersion, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a queue item attachment with file Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of QueueItemAttachment</returns>
        public ApiResponse< QueueItemAttachment > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutWithHttpInfo (string queueItemId, string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            //if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            //if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
            //if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
            //if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueItemAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemAttachment)));
        }

        /// <summary>
        /// Updates a queue item attachment with file Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of QueueItemAttachment</returns>
        public async System.Threading.Tasks.Task<QueueItemAttachment> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutAsync (string queueItemId, string id, string apiVersion, string driveName = null)
        {
             ApiResponse<QueueItemAttachment> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutAsyncWithHttpInfo(queueItemId, id, apiVersion, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a queue item attachment with file Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId">Queue item id</param>
        /// <param name="id">Queue item attachment id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePutAsyncWithHttpInfo (string queueItemId, string id, string apiVersion, string driveName = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            //if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            //if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
            //if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
            //if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
            //if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            //if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsIdUpdatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueItemAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemAttachment)));
        }

        /// <summary>
        /// Attach files to a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>QueueItemAttachment</returns>
        public QueueItemAttachment ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost (string queueItemId, string apiVersion, List<System.IO.FileStream> attachmentsList)
        {
             ApiResponse<QueueItemAttachment> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostWithHttpInfo(queueItemId, apiVersion, attachmentsList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach files to a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of QueueItemAttachment</returns>
        public ApiResponse< QueueItemAttachment > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostWithHttpInfo (string queueItemId, string apiVersion, List<System.IO.FileStream> attachmentsList)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            //if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (attachmentsList != null)
                foreach (var _file in attachmentsList)
                    localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile(_file.Name, _file)); // form parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueItemAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemAttachment)));
        }

        /// <summary>
        /// Attach files to a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of QueueItemAttachment</returns>
        public async System.Threading.Tasks.Task<List<QueueItemAttachment>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostAsync (string queueItemId, string apiVersion, string organizationId, List<System.IO.FileStream> attachmentsList)
        {
             ApiResponse<List<QueueItemAttachment>> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostAsyncWithHttpInfo(queueItemId, apiVersion, organizationId, attachmentsList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach files to a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueItemAttachment>>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPostAsyncWithHttpInfo (string queueItemId, string apiVersion, string organizationId, List<System.IO.FileStream> attachmentsList)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsPost");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/QueueItems/{queueItemId}/QueueItemAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (!string.IsNullOrEmpty(organizationId)) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameters
            //if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            if (attachmentsList != null)
            {
                foreach (var _file in attachmentsList)
                    if (_file != null) localVarFileParams.Add(_file.Name, this.Configuration.ApiClient.ParameterToFile("files", _file));
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueItemAttachment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                JsonConvert.DeserializeObject<List<QueueItemAttachment>>(localVarResponse.Content));
        }

        /// <summary>
        /// Provides all queue item attachments view for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AllQueueItemAttachmentsViewModelPaginatedList</returns>
        public AllQueueItemAttachmentsViewModelPaginatedList ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList> localVarResponse = ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetWithHttpInfo(queueItemId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides all queue item attachments view for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AllQueueItemAttachmentsViewModelPaginatedList</returns>
        public ApiResponse< AllQueueItemAttachmentsViewModelPaginatedList > ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllQueueItemAttachmentsViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllQueueItemAttachmentsViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides all queue item attachments view for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AllQueueItemAttachmentsViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AllQueueItemAttachmentsViewModelPaginatedList> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetAsync (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList> localVarResponse = await ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetAsyncWithHttpInfo(queueItemId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides all queue item attachments view for a queue item 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AllQueueItemAttachmentsViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList>> ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGetAsyncWithHttpInfo (string queueItemId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionQueueItemsQueueItemIdQueueItemAttachmentsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllQueueItemAttachmentsViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllQueueItemAttachmentsViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllQueueItemAttachmentsViewModelPaginatedList)));
        }

        /// <summary>
        /// Export/download a queue item attachment file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>System.IO.MemoryStream</returns>
        public System.IO.MemoryStream ExportQueueItemAttachment (string id, string apiVersion, string queueItemId, string driveName = null)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = ExportQueueItemAttachmentWithHttpInfo(id, apiVersion, queueItemId, driveName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export/download a queue item attachment file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.MemoryStream</returns>
        public ApiResponse< System.IO.MemoryStream > ExportQueueItemAttachmentWithHttpInfo (string id, string apiVersion, string queueItemId, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportQueueItemAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.MemoryStream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.MemoryStream)));
        }

        /// <summary>
        /// Export/download a queue item attachment file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of System.IO.MemoryStream</returns>
        public async System.Threading.Tasks.Task<System.IO.MemoryStream> ExportQueueItemAttachmentAsync (string id, string apiVersion, string organizationId, string queueItemId, string driveName = null)
        {
             ApiResponse<System.IO.MemoryStream> localVarResponse = await ExportQueueItemAttachmentAsyncWithHttpInfo(id, apiVersion, organizationId, queueItemId, driveName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export/download a queue item attachment file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <param name="driveName"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.MemoryStream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.MemoryStream>> ExportQueueItemAttachmentAsyncWithHttpInfo (string id, string apiVersion, string organizationId, string queueItemId, string driveName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->ExportQueueItemAttachment");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}/Export";
            if (!string.IsNullOrEmpty(organizationId))
                localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/QueueItems/{queueItemId}/QueueItemAttachments/{id}/Export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            if (driveName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "driveName", driveName)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportQueueItemAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            byte[] byteArray = localVarResponse.RawBytes;
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            stream.Write(byteArray, 0, byteArray.Length);

            return new ApiResponse<System.IO.MemoryStream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                stream);
        }

        /// <summary>
        /// Get queue item attachment by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>QueueItemAttachmentPaginatedList</returns>
        public QueueItemAttachmentPaginatedList GetQueueItemAttachments (string id, string apiVersion, string queueItemId)
        {
             ApiResponse<QueueItemAttachmentPaginatedList> localVarResponse = GetQueueItemAttachmentsWithHttpInfo(id, apiVersion, queueItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get queue item attachment by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>ApiResponse of QueueItemAttachmentPaginatedList</returns>
        public ApiResponse< QueueItemAttachmentPaginatedList > GetQueueItemAttachmentsWithHttpInfo (string id, string apiVersion, string queueItemId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueItemAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemAttachmentPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueItemAttachmentPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemAttachmentPaginatedList)));
        }

        /// <summary>
        /// Get queue item attachment by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>Task of QueueItemAttachmentPaginatedList</returns>
        public async System.Threading.Tasks.Task<QueueItemAttachmentPaginatedList> GetQueueItemAttachmentsAsync (string id, string apiVersion, string queueItemId)
        {
             ApiResponse<QueueItemAttachmentPaginatedList> localVarResponse = await GetQueueItemAttachmentsAsyncWithHttpInfo(id, apiVersion, queueItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get queue item attachment by id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiVersion"></param>
        /// <param name="queueItemId"></param>
        /// <returns>Task of ApiResponse (QueueItemAttachmentPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemAttachmentPaginatedList>> GetQueueItemAttachmentsAsyncWithHttpInfo (string id, string apiVersion, string queueItemId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");
            // verify the required parameter 'queueItemId' is set
            if (queueItemId == null)
                throw new ApiException(400, "Missing required parameter 'queueItemId' when calling QueueItemAttachmentsApi->GetQueueItemAttachments");

            var localVarPath = "/api/v{apiVersion}/QueueItems/{queueItemId}/QueueItemAttachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (queueItemId != null) localVarPathParams.Add("queueItemId", this.Configuration.ApiClient.ParameterToString(queueItemId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueItemAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemAttachmentPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueItemAttachmentPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemAttachmentPaginatedList)));
        }

    }
}
