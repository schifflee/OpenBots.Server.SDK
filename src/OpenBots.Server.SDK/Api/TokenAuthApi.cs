/* 
 * Openbots Documents Connector API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using RestSharp;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITokenAuthApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticateResultModel</returns>
        AuthenticateResultModel ApiTokenauthAuthenticatePost (AuthenticateModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticateResultModel</returns>
        ApiResponse<AuthenticateResultModel> ApiTokenauthAuthenticatePostWithHttpInfo (AuthenticateModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ImpersonatedAuthenticateResultModel</returns>
        ImpersonatedAuthenticateResultModel ApiTokenauthDelegatedimpersonatedauthenticatePost (long? userDelegationId = null, string impersonationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ApiResponse of ImpersonatedAuthenticateResultModel</returns>
        ApiResponse<ImpersonatedAuthenticateResultModel> ApiTokenauthDelegatedimpersonatedauthenticatePostWithHttpInfo (long? userDelegationId = null, string impersonationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ExternalAuthenticateResultModel</returns>
        ExternalAuthenticateResultModel ApiTokenauthExternalauthenticatePost (ExternalAuthenticateModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ExternalAuthenticateResultModel</returns>
        ApiResponse<ExternalAuthenticateResultModel> ApiTokenauthExternalauthenticatePostWithHttpInfo (ExternalAuthenticateModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        List<ExternalLoginProviderInfoModel> ApiTokenauthGetexternalauthenticationprovidersGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        ApiResponse<List<ExternalLoginProviderInfoModel>> ApiTokenauthGetexternalauthenticationprovidersGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ImpersonatedAuthenticateResultModel</returns>
        ImpersonatedAuthenticateResultModel ApiTokenauthImpersonatedauthenticatePost (string impersonationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ApiResponse of ImpersonatedAuthenticateResultModel</returns>
        ApiResponse<ImpersonatedAuthenticateResultModel> ApiTokenauthImpersonatedauthenticatePostWithHttpInfo (string impersonationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>SwitchedAccountAuthenticateResultModel</returns>
        SwitchedAccountAuthenticateResultModel ApiTokenauthLinkedaccountauthenticatePost (string switchAccountToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>ApiResponse of SwitchedAccountAuthenticateResultModel</returns>
        ApiResponse<SwitchedAccountAuthenticateResultModel> ApiTokenauthLinkedaccountauthenticatePostWithHttpInfo (string switchAccountToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiTokenauthLogoutGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiTokenauthLogoutGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>RefreshTokenResult</returns>
        RefreshTokenResult ApiTokenauthRefreshtokenPost (string refreshToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of RefreshTokenResult</returns>
        ApiResponse<RefreshTokenResult> ApiTokenauthRefreshtokenPostWithHttpInfo (string refreshToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiTokenauthSendtwofactorauthcodePost (SendTwoFactorAuthCodeModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiTokenauthSendtwofactorauthcodePostWithHttpInfo (SendTwoFactorAuthCodeModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns></returns>
        void ApiTokenauthTestnotificationGet (string message = null, string severity = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiTokenauthTestnotificationGetWithHttpInfo (string message = null, string severity = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticateResultModel</returns>
        System.Threading.Tasks.Task<AuthenticateResultModel> ApiTokenauthAuthenticatePostAsync (AuthenticateModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticateResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticateResultModel>> ApiTokenauthAuthenticatePostAsyncWithHttpInfo (AuthenticateModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ImpersonatedAuthenticateResultModel</returns>
        System.Threading.Tasks.Task<ImpersonatedAuthenticateResultModel> ApiTokenauthDelegatedimpersonatedauthenticatePostAsync (long? userDelegationId = null, string impersonationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ApiResponse (ImpersonatedAuthenticateResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthDelegatedimpersonatedauthenticatePostAsyncWithHttpInfo (long? userDelegationId = null, string impersonationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ExternalAuthenticateResultModel</returns>
        System.Threading.Tasks.Task<ExternalAuthenticateResultModel> ApiTokenauthExternalauthenticatePostAsync (ExternalAuthenticateModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalAuthenticateResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAuthenticateResultModel>> ApiTokenauthExternalauthenticatePostAsyncWithHttpInfo (ExternalAuthenticateModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalLoginProviderInfoModel>> ApiTokenauthGetexternalauthenticationprovidersGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ExternalLoginProviderInfoModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalLoginProviderInfoModel>>> ApiTokenauthGetexternalauthenticationprovidersGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ImpersonatedAuthenticateResultModel</returns>
        System.Threading.Tasks.Task<ImpersonatedAuthenticateResultModel> ApiTokenauthImpersonatedauthenticatePostAsync (string impersonationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ApiResponse (ImpersonatedAuthenticateResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthImpersonatedauthenticatePostAsyncWithHttpInfo (string impersonationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>Task of SwitchedAccountAuthenticateResultModel</returns>
        System.Threading.Tasks.Task<SwitchedAccountAuthenticateResultModel> ApiTokenauthLinkedaccountauthenticatePostAsync (string switchAccountToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>Task of ApiResponse (SwitchedAccountAuthenticateResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwitchedAccountAuthenticateResultModel>> ApiTokenauthLinkedaccountauthenticatePostAsyncWithHttpInfo (string switchAccountToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiTokenauthLogoutGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthLogoutGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of RefreshTokenResult</returns>
        System.Threading.Tasks.Task<RefreshTokenResult> ApiTokenauthRefreshtokenPostAsync (string refreshToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of ApiResponse (RefreshTokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefreshTokenResult>> ApiTokenauthRefreshtokenPostAsyncWithHttpInfo (string refreshToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiTokenauthSendtwofactorauthcodePostAsync (SendTwoFactorAuthCodeModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthSendtwofactorauthcodePostAsyncWithHttpInfo (SendTwoFactorAuthCodeModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiTokenauthTestnotificationGetAsync (string message = null, string severity = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthTestnotificationGetAsyncWithHttpInfo (string message = null, string severity = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TokenAuthApi : ITokenAuthApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenAuthApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenAuthApi"/> class
        /// </summary>
        /// <returns></returns>
        public TokenAuthApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenAuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenAuthApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticateResultModel</returns>
        public AuthenticateResultModel ApiTokenauthAuthenticatePost (AuthenticateModel body = null)
        {
             ApiResponse<AuthenticateResultModel> localVarResponse = ApiTokenauthAuthenticatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticateResultModel</returns>
        public ApiResponse< AuthenticateResultModel > ApiTokenauthAuthenticatePostWithHttpInfo (AuthenticateModel body = null)
        {

            var localVarPath = "/api/TokenAuth/Authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticateResultModel</returns>
        public async System.Threading.Tasks.Task<AuthenticateResultModel> ApiTokenauthAuthenticatePostAsync (AuthenticateModel body = null)
        {
             ApiResponse<AuthenticateResultModel> localVarResponse = await ApiTokenauthAuthenticatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticateResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticateResultModel>> ApiTokenauthAuthenticatePostAsyncWithHttpInfo (AuthenticateModel body = null)
        {

            var localVarPath = "/api/TokenAuth/Authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ImpersonatedAuthenticateResultModel</returns>
        public ImpersonatedAuthenticateResultModel ApiTokenauthDelegatedimpersonatedauthenticatePost (long? userDelegationId = null, string impersonationToken = null)
        {
             ApiResponse<ImpersonatedAuthenticateResultModel> localVarResponse = ApiTokenauthDelegatedimpersonatedauthenticatePostWithHttpInfo(userDelegationId, impersonationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ApiResponse of ImpersonatedAuthenticateResultModel</returns>
        public ApiResponse< ImpersonatedAuthenticateResultModel > ApiTokenauthDelegatedimpersonatedauthenticatePostWithHttpInfo (long? userDelegationId = null, string impersonationToken = null)
        {

            var localVarPath = "/api/TokenAuth/DelegatedImpersonatedAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userDelegationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDelegationId", userDelegationId)); // query parameter
            if (impersonationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonationToken", impersonationToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthDelegatedimpersonatedauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonatedAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpersonatedAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonatedAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ImpersonatedAuthenticateResultModel</returns>
        public async System.Threading.Tasks.Task<ImpersonatedAuthenticateResultModel> ApiTokenauthDelegatedimpersonatedauthenticatePostAsync (long? userDelegationId = null, string impersonationToken = null)
        {
             ApiResponse<ImpersonatedAuthenticateResultModel> localVarResponse = await ApiTokenauthDelegatedimpersonatedauthenticatePostAsyncWithHttpInfo(userDelegationId, impersonationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDelegationId"> (optional)</param>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ApiResponse (ImpersonatedAuthenticateResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthDelegatedimpersonatedauthenticatePostAsyncWithHttpInfo (long? userDelegationId = null, string impersonationToken = null)
        {

            var localVarPath = "/api/TokenAuth/DelegatedImpersonatedAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userDelegationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDelegationId", userDelegationId)); // query parameter
            if (impersonationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonationToken", impersonationToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthDelegatedimpersonatedauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonatedAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpersonatedAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonatedAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ExternalAuthenticateResultModel</returns>
        public ExternalAuthenticateResultModel ApiTokenauthExternalauthenticatePost (ExternalAuthenticateModel body = null)
        {
             ApiResponse<ExternalAuthenticateResultModel> localVarResponse = ApiTokenauthExternalauthenticatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ExternalAuthenticateResultModel</returns>
        public ApiResponse< ExternalAuthenticateResultModel > ApiTokenauthExternalauthenticatePostWithHttpInfo (ExternalAuthenticateModel body = null)
        {

            var localVarPath = "/api/TokenAuth/ExternalAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthExternalauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ExternalAuthenticateResultModel</returns>
        public async System.Threading.Tasks.Task<ExternalAuthenticateResultModel> ApiTokenauthExternalauthenticatePostAsync (ExternalAuthenticateModel body = null)
        {
             ApiResponse<ExternalAuthenticateResultModel> localVarResponse = await ApiTokenauthExternalauthenticatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalAuthenticateResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAuthenticateResultModel>> ApiTokenauthExternalauthenticatePostAsyncWithHttpInfo (ExternalAuthenticateModel body = null)
        {

            var localVarPath = "/api/TokenAuth/ExternalAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthExternalauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        public List<ExternalLoginProviderInfoModel> ApiTokenauthGetexternalauthenticationprovidersGet ()
        {
             ApiResponse<List<ExternalLoginProviderInfoModel>> localVarResponse = ApiTokenauthGetexternalauthenticationprovidersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        public ApiResponse< List<ExternalLoginProviderInfoModel> > ApiTokenauthGetexternalauthenticationprovidersGetWithHttpInfo ()
        {

            var localVarPath = "/api/TokenAuth/GetExternalAuthenticationProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthGetexternalauthenticationprovidersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalLoginProviderInfoModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalLoginProviderInfoModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalLoginProviderInfoModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ExternalLoginProviderInfoModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalLoginProviderInfoModel>> ApiTokenauthGetexternalauthenticationprovidersGetAsync ()
        {
             ApiResponse<List<ExternalLoginProviderInfoModel>> localVarResponse = await ApiTokenauthGetexternalauthenticationprovidersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ExternalLoginProviderInfoModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExternalLoginProviderInfoModel>>> ApiTokenauthGetexternalauthenticationprovidersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TokenAuth/GetExternalAuthenticationProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthGetexternalauthenticationprovidersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalLoginProviderInfoModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalLoginProviderInfoModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalLoginProviderInfoModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ImpersonatedAuthenticateResultModel</returns>
        public ImpersonatedAuthenticateResultModel ApiTokenauthImpersonatedauthenticatePost (string impersonationToken = null)
        {
             ApiResponse<ImpersonatedAuthenticateResultModel> localVarResponse = ApiTokenauthImpersonatedauthenticatePostWithHttpInfo(impersonationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>ApiResponse of ImpersonatedAuthenticateResultModel</returns>
        public ApiResponse< ImpersonatedAuthenticateResultModel > ApiTokenauthImpersonatedauthenticatePostWithHttpInfo (string impersonationToken = null)
        {

            var localVarPath = "/api/TokenAuth/ImpersonatedAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (impersonationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonationToken", impersonationToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthImpersonatedauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonatedAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpersonatedAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonatedAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ImpersonatedAuthenticateResultModel</returns>
        public async System.Threading.Tasks.Task<ImpersonatedAuthenticateResultModel> ApiTokenauthImpersonatedauthenticatePostAsync (string impersonationToken = null)
        {
             ApiResponse<ImpersonatedAuthenticateResultModel> localVarResponse = await ApiTokenauthImpersonatedauthenticatePostAsyncWithHttpInfo(impersonationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="impersonationToken"> (optional)</param>
        /// <returns>Task of ApiResponse (ImpersonatedAuthenticateResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImpersonatedAuthenticateResultModel>> ApiTokenauthImpersonatedauthenticatePostAsyncWithHttpInfo (string impersonationToken = null)
        {

            var localVarPath = "/api/TokenAuth/ImpersonatedAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (impersonationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonationToken", impersonationToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthImpersonatedauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpersonatedAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpersonatedAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpersonatedAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>SwitchedAccountAuthenticateResultModel</returns>
        public SwitchedAccountAuthenticateResultModel ApiTokenauthLinkedaccountauthenticatePost (string switchAccountToken = null)
        {
             ApiResponse<SwitchedAccountAuthenticateResultModel> localVarResponse = ApiTokenauthLinkedaccountauthenticatePostWithHttpInfo(switchAccountToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>ApiResponse of SwitchedAccountAuthenticateResultModel</returns>
        public ApiResponse< SwitchedAccountAuthenticateResultModel > ApiTokenauthLinkedaccountauthenticatePostWithHttpInfo (string switchAccountToken = null)
        {

            var localVarPath = "/api/TokenAuth/LinkedAccountAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (switchAccountToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "switchAccountToken", switchAccountToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthLinkedaccountauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchedAccountAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchedAccountAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchedAccountAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>Task of SwitchedAccountAuthenticateResultModel</returns>
        public async System.Threading.Tasks.Task<SwitchedAccountAuthenticateResultModel> ApiTokenauthLinkedaccountauthenticatePostAsync (string switchAccountToken = null)
        {
             ApiResponse<SwitchedAccountAuthenticateResultModel> localVarResponse = await ApiTokenauthLinkedaccountauthenticatePostAsyncWithHttpInfo(switchAccountToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="switchAccountToken"> (optional)</param>
        /// <returns>Task of ApiResponse (SwitchedAccountAuthenticateResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwitchedAccountAuthenticateResultModel>> ApiTokenauthLinkedaccountauthenticatePostAsyncWithHttpInfo (string switchAccountToken = null)
        {

            var localVarPath = "/api/TokenAuth/LinkedAccountAuthenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (switchAccountToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "switchAccountToken", switchAccountToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthLinkedaccountauthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwitchedAccountAuthenticateResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SwitchedAccountAuthenticateResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwitchedAccountAuthenticateResultModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiTokenauthLogoutGet ()
        {
             ApiTokenauthLogoutGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiTokenauthLogoutGetWithHttpInfo ()
        {

            var localVarPath = "/api/TokenAuth/LogOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthLogoutGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiTokenauthLogoutGetAsync ()
        {
             await ApiTokenauthLogoutGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthLogoutGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TokenAuth/LogOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthLogoutGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>RefreshTokenResult</returns>
        public RefreshTokenResult ApiTokenauthRefreshtokenPost (string refreshToken = null)
        {
             ApiResponse<RefreshTokenResult> localVarResponse = ApiTokenauthRefreshtokenPostWithHttpInfo(refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of RefreshTokenResult</returns>
        public ApiResponse< RefreshTokenResult > ApiTokenauthRefreshtokenPostWithHttpInfo (string refreshToken = null)
        {

            var localVarPath = "/api/TokenAuth/RefreshToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshToken", refreshToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthRefreshtokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefreshTokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RefreshTokenResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefreshTokenResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of RefreshTokenResult</returns>
        public async System.Threading.Tasks.Task<RefreshTokenResult> ApiTokenauthRefreshtokenPostAsync (string refreshToken = null)
        {
             ApiResponse<RefreshTokenResult> localVarResponse = await ApiTokenauthRefreshtokenPostAsyncWithHttpInfo(refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>Task of ApiResponse (RefreshTokenResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefreshTokenResult>> ApiTokenauthRefreshtokenPostAsyncWithHttpInfo (string refreshToken = null)
        {

            var localVarPath = "/api/TokenAuth/RefreshToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshToken", refreshToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthRefreshtokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefreshTokenResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RefreshTokenResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefreshTokenResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiTokenauthSendtwofactorauthcodePost (SendTwoFactorAuthCodeModel body = null)
        {
             ApiTokenauthSendtwofactorauthcodePostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiTokenauthSendtwofactorauthcodePostWithHttpInfo (SendTwoFactorAuthCodeModel body = null)
        {

            var localVarPath = "/api/TokenAuth/SendTwoFactorAuthCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthSendtwofactorauthcodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiTokenauthSendtwofactorauthcodePostAsync (SendTwoFactorAuthCodeModel body = null)
        {
             await ApiTokenauthSendtwofactorauthcodePostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthSendtwofactorauthcodePostAsyncWithHttpInfo (SendTwoFactorAuthCodeModel body = null)
        {

            var localVarPath = "/api/TokenAuth/SendTwoFactorAuthCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthSendtwofactorauthcodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns></returns>
        public void ApiTokenauthTestnotificationGet (string message = null, string severity = null)
        {
             ApiTokenauthTestnotificationGetWithHttpInfo(message, severity);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiTokenauthTestnotificationGetWithHttpInfo (string message = null, string severity = null)
        {

            var localVarPath = "/api/TokenAuth/TestNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthTestnotificationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiTokenauthTestnotificationGetAsync (string message = null, string severity = null)
        {
             await ApiTokenauthTestnotificationGetAsyncWithHttpInfo(message, severity);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="message"> (optional)</param>
        /// <param name="severity"> (optional, default to info)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokenauthTestnotificationGetAsyncWithHttpInfo (string message = null, string severity = null)
        {

            var localVarPath = "/api/TokenAuth/TestNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokenauthTestnotificationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
