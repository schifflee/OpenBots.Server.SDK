/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;
using Newtonsoft.Json;
using RestSharp.Serialization.Json;
using Newtonsoft.Json.Linq;
using System.Net.Http;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Used to get current user&#x27;s IP Address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>string</returns>
        string ApiVapiVersionAuthPingGet(string apiVersion);

        /// <summary>
        /// Used to get current user&#x27;s IP Address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiVapiVersionAuthPingGetWithHttpInfo(string apiVersion);
        /// <summary>
        /// Get user info for Studio to utilize Server commands
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="serverType"></param>
        /// <param name="organizationName"></param>
        /// <param name="environment"></param>
        /// <param name="serverUrl"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        UserInfo GetUserInfo(string apiVersion, string serverType, string organizationName, string environment, string serverUrl, string username, string password);
        /// <summary>
        /// Get user info for logged in authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns></returns>
        void ApiVapiVersionAuthGetUserInfoGet (string apiVersion);

        /// <summary>
        /// Get user info for logged in authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionAuthGetUserInfoGetWithHttpInfo (string apiVersion);
        
        /// <summary>
        /// Login with username and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionAuthTokenPost (string apiVersion, Login body = null);

        /// <summary>
        /// Login with username and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionAuthTokenPostWithHttpInfo (string apiVersion, Login body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Used to get current user&#x27;s IP Address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiVapiVersionAuthPingGetAsync(string apiVersion);

        /// <summary>
        /// Used to get current user&#x27;s IP Address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiVapiVersionAuthPingGetAsyncWithHttpInfo(string apiVersion);
        /// <summary>
        /// Get user info for logged in authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionAuthGetUserInfoGetAsync (string token, string apiVersion);

        /// <summary>
        /// Get user info for logged in authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuthGetUserInfoGetAsyncWithHttpInfo (string token, string apiVersion);
        
        /// Login with username and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionAuthTokenPostAsync (string apiVersion, Login body = null);

        /// <summary>
        /// Login with username and password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuthTokenPostAsyncWithHttpInfo (string apiVersion, Login body = null);
        
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthApi : IAuthApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Used to get current user&#x27;s IP Address 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>string</returns>
        public string ApiVapiVersionAuthPingGet(string apiVersion)
        {
            ApiResponse<string> localVarResponse = ApiVapiVersionAuthPingGetWithHttpInfo(apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Used to get current user&#x27;s IP Address 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApiVapiVersionAuthPingGetWithHttpInfo(string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthPingGet");

            var localVarPath = "/api/v{apiVersion}/Auth/Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuthPingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Used to get current user&#x27;s IP Address 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiVapiVersionAuthPingGetAsync(string apiVersion)
        {
            ApiResponse<string> localVarResponse = await ApiVapiVersionAuthPingGetAsyncWithHttpInfo(apiVersion);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Used to get current user&#x27;s IP Address 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiVapiVersionAuthPingGetAsyncWithHttpInfo(string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthPingGet");

            var localVarPath = "/api/v{apiVersion}/Auth/Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuthPingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        public UserInfo GetUserInfo(string apiVersion, string serverType, string organizationName, string environment, string serverUrl, string username, string password)
        {
            ServerInfo serverInfo = new ServerInfo(); 
            OrganizationListing organization = new OrganizationListing();
            string loginUrl = serverUrl;
            string documentsUrl = string.Empty;

            if (serverType == "Cloud" || serverType == "Documents")
            {
                var serviceRegistrationList = GetServiceRegistration(apiVersion, environment);

                if (serviceRegistrationList == null || serviceRegistrationList.Count() == 0)
                    throw new Exception("Service registration could not be found");

                foreach (var serviceRegistration in serviceRegistrationList)
                {
                    if (serviceRegistration.ServiceTag == "OpenBots" && serverType == "Cloud") // Authentication
                    {
                        if (serviceRegistration.IsCurrentlyUnderMaintenance)
                            throw new Exception($"Server {serviceRegistration.Name} is currently undergoing maintenance and cannot be accessed at this time");
                        else loginUrl = serviceRegistration.ServiceBaseUri.ToString();
                    }

                    if (serviceRegistration.ServiceTag == "OpenBots.CloudServer" && serverType == "Cloud") // CloudServer Orchestration API
                    {
                        if (serviceRegistration.IsCurrentlyUnderMaintenance)
                            throw new Exception($"Server {serviceRegistration.Name} is currently undergoing maintenance and cannot be accessed at this time");
                        else serverUrl = serviceRegistration.ServiceBaseUri.ToString();
                    }
                    if (serviceRegistration.ServiceTag == "OpenBots.Documents" && serverType == "Documents")
                    {
                        if (serviceRegistration.IsCurrentlyUnderMaintenance)
                            throw new Exception($"Server {serviceRegistration.Name} is currently undergoing maintenance and cannot be accessed at this time");
                        else documentsUrl = serviceRegistration.ServiceBaseUri.ToString();
                    }
                }
            }

            if (string.IsNullOrEmpty(serverUrl))
                throw new Exception("Server URL not found");

            if ((serverType == "Cloud" || serverType == "Local") && (username == null || password == null))
                throw new Exception("Agent credentials not found in registry");
            else if (serverType == "Documents" && (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password)))
                throw new Exception("Credential values are null or an empty string");


            string token = GetAuthToken(apiVersion, serverType, username, password, loginUrl);

            if (serverType == "Cloud")
            {
                serverInfo = GetServerInfo(apiVersion, serverUrl, token);
                organization = GetOrganization(token, apiVersion, organizationName, serverUrl, serverInfo.MyOrganizations);
            }

            var userInfo = new UserInfo()
            {
                OrganizationId = organization?.Id.ToString(),
                OrganizationName = organization?.Name,
                ServerType = serverType,
                Token = token,
                ServerUrl = serverUrl,
                LoginUrl = loginUrl,
                DocumentsUrl = documentsUrl,
                ApiVersion = apiVersion,
                Environment = environment,
                UserId = serverInfo?.PersonId.ToString()
            };

            return userInfo;
        }

        public static List<ServiceRegistration> GetServiceRegistration(string apiVersion, string environment)
        {
            string serviceUrl = "https://api.members.openbots.io";
            var client = new RestClient(serviceUrl);
            var request = new RestRequest($"api/v{apiVersion}/ServiceRegistration", Method.GET);
            request.AddParameter("$filter", $"environment eq '{environment}'");
            request.RequestFormat = DataFormat.Json;

            var response = client.Execute(request);

            if (!response.IsSuccessful)
                throw new HttpRequestException($"Status Code: {response.StatusCode} - Error Message: {response.ErrorMessage}");
            var deserializer = new JsonDeserializer();
            var output = deserializer.Deserialize<Dictionary<string, string>>(response);
            var items = output["items"];
            return JsonConvert.DeserializeObject<List<ServiceRegistration>>(items);
        }

        public static OrganizationListing GetOrganization(string token, string apiVersion, string organizationName, string serverUrl, List<OrganizationListing> orgList)
        {
            var apiInstance = new OrganizationsApi(serverUrl);
            apiInstance.Configuration.AccessToken = token;
            OrganizationListing organization = null;

            try
            {
                if (string.IsNullOrEmpty(organizationName))
                {
                    if (orgList.Count == 1)
                    {
                        organization = orgList.FirstOrDefault();
                    }

                    if (orgList.Count == 0) throw new Exception("No Organizations were found for the current user");
                    if (orgList.Count > 1) throw new Exception("Multiple Organizations exist for the current user, please specify an Organization name");
                }
                else
                {
                    bool IsUserInOrg = false;
                    foreach (var org in orgList)
                    {
                        if (org.Name == organizationName)
                        {
                            IsUserInOrg = true;
                            organization = org;
                            break;
                        }
                    }

                    if (!IsUserInOrg)
                        throw new Exception($"Organization {organizationName} does not match user's existing organizations");
                }

                return organization;
            }
            catch (Exception ex)
            {
                if (ex.Message != "One or more errors occurred.")
                    throw new InvalidOperationException("Exception when calling OrganizationsApi.GetOrganizations: " + ex.Message);
                else
                    throw new InvalidOperationException(ex.InnerException.Message);
            }
        }

        public static string GetAuthToken(string apiVersion, string serverType, string username, string password, string loginUrl)
        {
            string token;
            var login = new Login(username, password);
            var apiInstance = new AuthApi(loginUrl);

            if (serverType == "Local") //get token from open source Server
            {
                try
                {
                    var result = apiInstance.ApiVapiVersionAuthTokenPostAsyncWithHttpInfo(apiVersion, login).Result.Data.ToString();
                    JObject jsonObj = JObject.Parse(result.Replace("[]", "null"));
                    Dictionary<string, string> resultDict = jsonObj.ToObject<Dictionary<string, string>>();
                    token = resultDict["token"].ToString();
                }
                catch (Exception ex)
                {
                    if (ex.Message != "One or more errors occurred.")
                        throw new InvalidOperationException("Exception when calling AuthApi.GetAuthToken: " + ex.Message);
                    else
                        throw new InvalidOperationException(ex.InnerException.Message);
                }
            }
            else //if (serverType == "Cloud" || serverType == "Documents") //get machine token for cloud Server
                token = apiInstance.GetCloudToken(loginUrl, apiVersion, username, password);

            return token;
        }

        public static ServerInfo GetServerInfo(string apiVersion, string serverUrl, string token)
        {
            var apiInstance = new AuthApi(serverUrl);

            try
            {
                var result = apiInstance.ApiVapiVersionAuthGetUserInfoGetAsyncWithHttpInfo(token, apiVersion).Result.Data.ToString();
                var serverInfo = JsonConvert.DeserializeObject<ServerInfo>(result);
                return serverInfo;
            }
            catch (Exception ex)
            {
                if (ex.Message != "One or more errors occurred.")
                    throw new InvalidOperationException("Exception when calling AuthApi.GetUserInfo: " + ex.Message);
                else
                    throw new InvalidOperationException(ex.InnerException.Message);
            }
        }

        public string GetCloudToken(string loginUrl, string apiVersion, string username, string password)
        {
            var client = new RestClient(loginUrl);
            var request = new RestRequest($"api/v{apiVersion}/Auth/machine/token", Method.POST);
            request.RequestFormat = DataFormat.Json;
            //request.AddJsonBody(login);
            request.AddJsonBody($"{{ \"userName\": \"{username}\", \"password\": \"{password}\" }}");

            var response = client.Execute(request);

            if (!response.IsSuccessful)
                throw new HttpRequestException($"Status Code: {response.StatusCode} - Error Message: {response.ErrorMessage}");

            var deserializer = new JsonDeserializer();
            var output = deserializer.Deserialize<Dictionary<string, string>>(response);
            string token = output["accessToken"];
            return token;
        }

        /// <summary>
        /// Get user info for logged in authenticated user 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns></returns>
        public void ApiVapiVersionAuthGetUserInfoGet (string apiVersion)
        {
             ApiVapiVersionAuthGetUserInfoGetWithHttpInfo(apiVersion);
        }

        /// <summary>
        /// Get user info for logged in authenticated user 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionAuthGetUserInfoGetWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthGetUserInfoGet");

            var localVarPath = "/api/v{apiVersion}/Auth/GetUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuthGetUserInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get user info for logged in authenticated user 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionAuthGetUserInfoGetAsync (string token, string apiVersion)
        {
             await ApiVapiVersionAuthGetUserInfoGetAsyncWithHttpInfo(token, apiVersion);

        }

        /// <summary>
        /// Get user info for logged in authenticated user 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuthGetUserInfoGetAsyncWithHttpInfo (string token, string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthGetUserInfoGet");

            var localVarPath = "/api/v{apiVersion}/Auth/GetUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter

            Configuration.AccessToken = token;
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content);
        }

        /// <summary>
        /// Login with username and password 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionAuthTokenPost (string apiVersion, Login body = null)
        {
             ApiVapiVersionAuthTokenPostWithHttpInfo(apiVersion, body);
        }

        /// <summary>
        /// Login with username and password 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionAuthTokenPostWithHttpInfo (string apiVersion, Login body = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthTokenPost");

            var localVarPath = "/api/v{apiVersion}/Auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuthTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content);
        }

        /// <summary>
        /// Login with username and password 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionAuthTokenPostAsync (string apiVersion, Login body = null)
        {
             await ApiVapiVersionAuthTokenPostAsyncWithHttpInfo(apiVersion, body);

        }

        /// <summary>
        /// Login with username and password 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuthTokenPostAsyncWithHttpInfo(string apiVersion, Login body = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuthApi->ApiVapiVersionAuthTokenPost");

            var localVarPath = "/api/v{apiVersion}/Auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content);
        }
     }
}
